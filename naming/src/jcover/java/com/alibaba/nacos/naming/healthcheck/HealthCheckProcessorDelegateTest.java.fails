package com.alibaba.nacos.naming.healthcheck;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.healthcheck.extend.HealthCheckExtendProvider;

import java.util.Collection;
import java.util.stream.Stream;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.healthcheck.HealthCheckProcessorDelegate
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {HealthCheckProcessorDelegate.class})
@RunWith(SpringRunner.class)
public class HealthCheckProcessorDelegateTest {

    @MockBean(name = "collection")
    private Collection<HealthCheckProcessor> collection;

    @MockBean(name = "healthCheckExtendProvider")
    private HealthCheckExtendProvider healthCheckExtendProvider;

    @Autowired
    private HealthCheckProcessorDelegate service;

    @Test
    public void getType() throws org.springframework.beans.BeansException {
        HealthCheckProcessor element = mock(HealthCheckProcessor.class);
        when(element.getType())
            .thenReturn("foo")
            .thenReturn("bar");
        when(collection.stream())
            .thenReturn(Stream.<HealthCheckProcessor>of(element));
        assertThat(service.getType(), is(nullValue()));
        Mockito.verify(healthCheckExtendProvider).init();
    }
}
