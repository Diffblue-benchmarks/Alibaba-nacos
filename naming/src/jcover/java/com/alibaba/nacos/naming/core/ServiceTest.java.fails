package com.alibaba.nacos.naming.core;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.hamcrest.number.IsCloseTo.closeTo;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.pojo.AbstractHealthChecker;
import com.alibaba.nacos.naming.healthcheck.RsInfo;
import com.alibaba.nacos.naming.selector.LabelSelector;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.core.Service
 *
 * @author Diffblue Cover
 */

public class ServiceTest {

    @Test
    public void factory1() throws CloneNotSupportedException {
        Service service = new Service("Acme");
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        Cluster x5 = new Cluster();
        x5.setDefCkport(1);
        x5.setDefIPPort(1);
        x5.setServiceName("John Smith");
        x5.setSitegroup("DE");
        x5.setDefaultCheckPort(1);
        x5.setDefaultPort(1);
        AbstractHealthChecker healthChecker1 = mock(AbstractHealthChecker.class);
        x5.setHealthChecker(healthChecker1);
        x5.setName("John Smith");
        x5.setUseIPPort4Check(false);
        clusterMap.put("foo", x5);
        service.setClusterMap(clusterMap);
        service.setEnabled(false);
        service.setIpDeleteTimeout(1L);
        service.setLastModifiedMillis(1L);
        service.setNamespaceId("1234");
        service.setOwners(new ArrayList<String>());
        service.setResetWeight(false);
        LabelSelector selector = new LabelSelector();
        selector.setLabels(new HashSet<String>());
        selector.setExpression("1");
        service.setSelector(selector);
        service.setToken("Bearer");
        service.setAppName("Acme");
        service.setGroupName("Acme");
        HashMap<String, String> metadata = new HashMap<String, String>();
        metadata.put("foo", "foo");
        service.setMetadata(metadata);
        service.setName("Acme");
        service.setProtectThreshold(1.0f);
        assertThat(service.getClusterMap().get("foo"), sameInstance(x5));
        assertThat(service.getEnabled(), is(false));
        assertThat(service.getIpDeleteTimeout(), is(1L));
        assertThat(service.getLastModifiedMillis(), is(1L));
        assertThat(service.getNamespaceId(), is("1234"));
        assertThat(service.getOwners(), empty());
        assertThat(service.getResetWeight(), is(false));
        assertThat(service.getSelector().getType(), is("label"));
        assertThat(service.getToken(), is("Bearer"));
        assertThat(service.getAppName(), is("Acme"));
        assertThat(service.getGroupName(), is("Acme"));
        assertThat(service.getMetadata().get("foo"), is("foo"));
        assertThat(service.getName(), is("Acme"));
        assertThat(service.getProtectThreshold(), closeTo(1.0f, 0.0));
    }

    @Test
    public void factory2() throws CloneNotSupportedException {
        Service service = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        Cluster x5 = new Cluster();
        x5.setDefCkport(1);
        x5.setDefIPPort(1);
        x5.setServiceName("John Smith");
        x5.setSitegroup("DE");
        x5.setDefaultCheckPort(1);
        x5.setDefaultPort(1);
        AbstractHealthChecker healthChecker1 = mock(AbstractHealthChecker.class);
        x5.setHealthChecker(healthChecker1);
        x5.setName("John Smith");
        x5.setUseIPPort4Check(true);
        clusterMap.put("foo", x5);
        service.setClusterMap(clusterMap);
        service.setEnabled(false);
        service.setIpDeleteTimeout(1L);
        service.setLastModifiedMillis(1L);
        service.setNamespaceId("1234");
        service.setOwners(new ArrayList<String>());
        service.setResetWeight(false);
        LabelSelector selector = new LabelSelector();
        selector.setLabels(new HashSet<String>());
        selector.setExpression("1");
        service.setSelector(selector);
        service.setToken("Bearer");
        service.setAppName("Acme");
        service.setGroupName("Acme");
        HashMap<String, String> metadata = new HashMap<String, String>();
        metadata.put("foo", "foo");
        service.setMetadata(metadata);
        service.setName("Acme");
        service.setProtectThreshold(1.0f);
        assertThat(service.getClusterMap().get("foo"), sameInstance(x5));
        assertThat(service.getEnabled(), is(false));
        assertThat(service.getIpDeleteTimeout(), is(1L));
        assertThat(service.getLastModifiedMillis(), is(1L));
        assertThat(service.getNamespaceId(), is("1234"));
        assertThat(service.getOwners(), empty());
        assertThat(service.getResetWeight(), is(false));
        assertThat(service.getSelector().getType(), is("label"));
        assertThat(service.getToken(), is("Bearer"));
        assertThat(service.getAppName(), is("Acme"));
        assertThat(service.getGroupName(), is("Acme"));
        assertThat(service.getMetadata().get("foo"), is("foo"));
        assertThat(service.getName(), is("Acme"));
        assertThat(service.getProtectThreshold(), closeTo(1.0f, 0.0));
    }

    @Test
    public void processClientBeat() {
        new Service().processClientBeat(new RsInfo());
    }

    @Test
    public void interestsKeyIsKeyReturnsFalse() {
        assertThat(new Service().interests("key"), is(false));
    }

    @Test
    public void matchUnlistenKeyKeyIsKeyReturnsFalse() {
        assertThat(new Service().matchUnlistenKey("key"), is(false));
    }

    @Test
    public void onDeleteKeyIsKey() throws Exception {
        new Service().onDelete("key");
    }

    @Test
    public void healthyInstanceCountReturnsZero() {
        Service service = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        clusterMap.put("foo", new Cluster());
        service.setClusterMap(clusterMap);
        assertThat(service.healthyInstanceCount(), is(0));
    }

    @Test
    public void meetProtectThresholdReturnsFalse() {
        Service service = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        clusterMap.put("foo", new Cluster());
        service.setClusterMap(clusterMap);
        assertThat(service.meetProtectThreshold(), is(false));
    }

    @Test
    public void destroy() throws Exception {
        Service service = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        clusterMap.put("foo", new Cluster());
        service.setClusterMap(clusterMap);
        service.setName("Acme");
        service.destroy();
    }

    @Test
    public void allIPsEphemeralIsFalse() {
        Service service = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        clusterMap.put("foo", new Cluster());
        service.setClusterMap(clusterMap);
        assertThat(service.allIPs(false), empty());
    }

    @Test
    public void allIPsClustersIsEmpty() {
        assertThat(new Service().allIPs(new ArrayList<String>()), empty());
    }

    @Test
    public void srvIPsClustersIsEmptyReturnsEmpty() {
        Service service = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        clusterMap.put("foo", new Cluster());
        service.setClusterMap(clusterMap);
        assertThat(service.srvIPs(new ArrayList<String>()), empty());
    }

    @Test
    public void addCluster() {

        // arrange
        Service service1 = new Service();
        Cluster cluster = new Cluster();
        cluster.setName("John Smith");

        // act
        service1.addCluster(cluster);

        // assert
        assertThat(service1.getClusterMap().get("John Smith"), sameInstance(cluster));
    }
}
