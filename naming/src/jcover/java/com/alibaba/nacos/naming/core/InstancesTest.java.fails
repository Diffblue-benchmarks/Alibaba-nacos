package com.alibaba.nacos.naming.core;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.core.Instances
 *
 * @author Diffblue JCover
 */

public class InstancesTest {

    @Test(timeout=10000)
    public void convertMap2StringMapIsEmpty() {
        Instances instances = new Instances();
        assertThat(instances.convertMap2String(new HashMap<String, String>()), is(""));
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
    }

    @Test(timeout=10000)
    public void convertMap2StringMapIsFoo() {
        Instances instances = new Instances();
        Map<String, String> map = new HashMap<String, String>();
        ((HashMap<String, String>)map).put("foo", "foo");
        assertThat(instances.convertMap2String(map), is("foo:foo,"));
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
    }

    @Test(timeout=10000)
    public void convertMap2StringMapIsNull() {
        Instances instances = new Instances();
        assertThat(instances.convertMap2String(null), is(""));
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
    }

    @Test(timeout=10000)
    public void getCachedChecksum() {
        Instances instances = new Instances();
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
    }

    @Test(timeout=10000)
    public void getChecksum() {
        Instances instances = new Instances();
        assertThat(instances.getChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
    }

    @Test(timeout=10000)
    public void getInstanceListReturnsEmpty() {
        Instances instances = new Instances();
        List<Instance> result = instances.getInstanceList();
        assertThat(result, empty());
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
        assertThat(instances.getInstanceList(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void setInstanceListToEmpty() {
        Instances instances = new Instances();
        List<Instance> instanceList = new ArrayList<Instance>();
        instances.setInstanceList(instanceList);
        assertThat(instances.getCachedChecksum(), is("d41d8cd98f00b204e9800998ecf8427e"));
        assertThat(instances.getInstanceList(), sameInstance(instanceList));
    }
}
