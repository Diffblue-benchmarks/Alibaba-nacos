package com.alibaba.nacos.naming.pojo;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.pojo.AbstractHealthChecker;
import com.alibaba.nacos.api.naming.pojo.Cluster;
import com.alibaba.nacos.naming.core.Service;
import com.alibaba.nacos.naming.selector.LabelSelector;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.pojo.ServiceDetailView
 *
 * @author Diffblue Cover
 */

public class ServiceDetailViewTest {

    @Test
    public void factory() throws CloneNotSupportedException {
        ServiceDetailView serviceDetailView = new ServiceDetailView();
        ArrayList<Cluster> clusters = new ArrayList<Cluster>();
        Cluster cluster = new com.alibaba.nacos.naming.core.Cluster();
        cluster.setDefaultCheckPort(1);
        cluster.setDefaultPort(1);
        AbstractHealthChecker healthChecker1 =
             mock(AbstractHealthChecker.class);
        cluster.setHealthChecker(healthChecker1);
        HashMap<String, String> metadata2 = new HashMap<String, String>();
        metadata2.put("foo", "foo");
        cluster.setMetadata(metadata2);
        cluster.setName("John Smith");
        cluster.setServiceName("John Smith");
        cluster.setUseIPPort4Check(false);
        clusters.add(cluster);
        serviceDetailView.setClusters(clusters);
        Service service2 = new Service();
        HashMap<String, com.alibaba.nacos.naming.core.Cluster> clusterMap2 =
             new HashMap<String, com.alibaba.nacos.naming.core.Cluster>();
        com.alibaba.nacos.naming.core.Cluster x142 =
             new com.alibaba.nacos.naming.core.Cluster();
        x142.setDefCkport(1);
        x142.setDefIPPort(1);
        x142.setService(new Service());
        x142.setServiceName("John Smith");
        x142.setSitegroup("DE");
        x142.setDefaultCheckPort(1);
        x142.setDefaultPort(1);
        AbstractHealthChecker healthChecker2 =
             mock(AbstractHealthChecker.class);
        x142.setHealthChecker(healthChecker2);
        x142.setMetadata(new HashMap<String, String>());
        x142.setName("John Smith");
        x142.setUseIPPort4Check(false);
        clusterMap2.put("foo", x142);
        service2.setClusterMap(clusterMap2);
        service2.setEnabled(false);
        service2.setIpDeleteTimeout(1L);
        service2.setLastModifiedMillis(1L);
        service2.setNamespaceId("1234");
        ArrayList<String> owners2 = new ArrayList<String>();
        owners2.add("foo");
        service2.setOwners(owners2);
        service2.setResetWeight(false);
        LabelSelector selector2 = new LabelSelector();
        selector2.setLabels(new HashSet<String>());
        selector2.setExpression("1");
        service2.setSelector(selector2);
        service2.setToken("Bearer");
        service2.setAppName("Acme");
        service2.setGroupName("Acme");
        HashMap<String, String> metadata5 = new HashMap<String, String>();
        metadata5.put("foo", "foo");
        service2.setMetadata(metadata5);
        service2.setName("Acme");
        service2.setProtectThreshold(1.0f);
        serviceDetailView.setService(service2);
        assertThat(serviceDetailView.getClusters().size(), is(1));
        assertThat(serviceDetailView.getClusters().get(0), sameInstance(cluster));
        assertThat(serviceDetailView.getService().getAppName(), is("Acme"));
        assertThat(serviceDetailView.getService().getGroupName(), is("Acme"));
        assertThat(serviceDetailView.getService().getMetadata().get("foo"), is("foo"));
        assertThat(serviceDetailView.getService().getName(), is("Acme"));
        assertEquals(1.0f, serviceDetailView.getService().getProtectThreshold(), 0);
    }
}
