package com.alibaba.nacos.naming.pojo;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.pojo.AbstractHealthChecker;
import com.alibaba.nacos.api.naming.pojo.Cluster;
import com.alibaba.nacos.api.naming.pojo.Service;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.pojo.ServiceDetailView
 *
 * @author Diffblue Cover
 */

public class ServiceDetailViewTest {

    @Test
    public void factory() {
        ServiceDetailView serviceDetailView = new ServiceDetailView();
        ArrayList<Cluster> clusters = new ArrayList<Cluster>();
        Cluster cluster = new Cluster();
        cluster.setDefaultCheckPort(1);
        cluster.setDefaultPort(1);
        AbstractHealthChecker healthChecker =
             mock(AbstractHealthChecker.class);
        cluster.setHealthChecker(healthChecker);
        cluster.setMetadata(new HashMap<String, String>());
        cluster.setName("John Smith");
        cluster.setServiceName("John Smith");
        cluster.setUseIPPort4Check(false);
        clusters.add(cluster);
        serviceDetailView.setClusters(clusters);
        Service service = new Service();
        service.setAppName("Acme");
        service.setGroupName("Acme");
        service.setMetadata(new HashMap<String, String>());
        service.setName("Acme");
        service.setProtectThreshold(1.0f);
        serviceDetailView.setService(service);
        assertThat(serviceDetailView.getClusters().size(), is(1));
        assertThat(serviceDetailView.getClusters().get(0), sameInstance(cluster));
        assertThat(serviceDetailView.getService(), sameInstance(service));
    }
}
