package com.alibaba.nacos.naming.consistency.persistent.raft;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.consistency.Datum;
import com.alibaba.nacos.naming.consistency.RecordListener;
import com.alibaba.nacos.naming.misc.SwitchDomain;
import com.alibaba.nacos.naming.pojo.Record;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.consistency.persistent.raft.RaftConsistencyServiceImpl
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {RaftConsistencyServiceImpl.class})
@RunWith(SpringRunner.class)
public class RaftConsistencyServiceImplTest {

    @MockBean(name = "peers")
    private RaftPeerSet peers;

    @MockBean(name = "raftCore")
    private RaftCore raftCore;

    @MockBean(name = "switchDomain")
    private SwitchDomain switchDomain;

    @Autowired
    private RaftConsistencyServiceImpl service;

    @Test
    public void put() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException, com.alibaba.nacos.api.exception.NacosException {
        Record value = mock(Record.class);
        service.put("key", value);
        Mockito.verify(raftCore).signalPublish(ArgumentMatchers.eq("key"), ArgumentMatchers.<Record>any());
    }

    @Test
    public void remove() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException, com.alibaba.nacos.api.exception.NacosException {
        service.remove("key");
        Mockito.verify(raftCore).signalDelete(ArgumentMatchers.eq("key"));
        Mockito.verify(raftCore).unlistenAll(ArgumentMatchers.eq("key"));
    }

    @Test
    public void getKeyIsKey() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException, com.alibaba.nacos.api.exception.NacosException {
        when(raftCore.getDatum(Mockito.<String>any()))
            .thenReturn(new Datum<Object>());
        // pojo Datum
    }

    @Test
    public void listen() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException, com.alibaba.nacos.api.exception.NacosException {
        RecordListener listener = mock(RecordListener.class);
        service.listen("key", listener);
        Mockito.verify(raftCore).listen(ArgumentMatchers.eq("key"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void unlisten() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException, com.alibaba.nacos.api.exception.NacosException {
        RecordListener listener = mock(RecordListener.class);
        service.unlisten("key", listener);
        Mockito.verify(raftCore).unlisten(ArgumentMatchers.eq("key"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void isAvailableReturnsFalse() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException {
        when(switchDomain.getOverriddenServerStatus())
            .thenReturn("foo");
        when(raftCore.isInitialized())
            .thenReturn(false);
        assertThat(service.isAvailable(), is(false));
    }

    @Test
    public void isAvailableReturnsTrue() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException {
        when(raftCore.isInitialized())
            .thenReturn(true);
        assertThat(service.isAvailable(), is(true));
    }

    @Test
    public void onPut() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException, com.alibaba.nacos.api.exception.NacosException {
        service.onPut(new Datum(), new RaftPeer());
        Mockito.verify(raftCore).onPublish(ArgumentMatchers.<Datum>any(), ArgumentMatchers.<RaftPeer>any());
    }

    @Test
    public void onRemove() throws CloneNotSupportedException, Exception, org.springframework.beans.BeansException, com.alibaba.nacos.api.exception.NacosException {
        service.onRemove(new Datum(), new RaftPeer());
        Mockito.verify(raftCore).onDelete(ArgumentMatchers.eq((String) null), ArgumentMatchers.<RaftPeer>any());
    }
}
