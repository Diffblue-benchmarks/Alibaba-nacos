package com.alibaba.nacos.naming.core;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import com.alibaba.nacos.naming.cluster.ServerListManager;
import com.alibaba.nacos.naming.consistency.ConsistencyService;
import com.alibaba.nacos.naming.consistency.RecordListener;
import com.alibaba.nacos.naming.consistency.persistent.raft.RaftPeer;
import com.alibaba.nacos.naming.consistency.persistent.raft.RaftPeerSet;
import com.alibaba.nacos.naming.misc.SwitchDomain;
import com.alibaba.nacos.naming.pojo.Record;
import com.alibaba.nacos.naming.push.PushService;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.core.ServiceManager
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ServiceManager.class})
@RunWith(SpringRunner.class)
public class ServiceManagerTest {

    @MockBean(name = "consistencyService")
    private ConsistencyService consistencyService;

    @MockBean(name = "distroMapper")
    private DistroMapper distroMapper;

    @MockBean(name = "pushService")
    private PushService pushService;

    @MockBean(name = "serverListManager")
    private ServerListManager serverListManager;

    @MockBean(name = "switchDomain")
    private SwitchDomain switchDomain;

    @Autowired
    private ServiceManager service;

    @Test
    public void addUpdatedService2Queue() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        service.addUpdatedService2Queue("1234", "Acme", "/some/path.html", "DE");
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void containService() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.containService("1234", "Acme"), is(false));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void createEmptyService() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        service.createEmptyService("1234", "Acme", false);
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
        Mockito.verify(consistencyService).put(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta.1234##Acme"), ArgumentMatchers.<Record>any());
    }

    @Test
    public void getAllNamespaces() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getAllNamespaces(), empty());
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getAllServiceNameList() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getAllServiceNameList("root"), empty());
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getAllServiceNames() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getAllServiceNames().isEmpty(), is(true));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getInstance() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getInstance("1234", "Acme", "John Smith", "DE", 1), is(nullValue()));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getInstanceCount() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getInstanceCount(), is(0));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getPagedClusterState() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getPagedClusterState("1234", 1, 1, "New York", "New York", new ArrayList<RaftPeer>(), new RaftPeerSet()), is(0));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getPagedService() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getPagedService("1234", 1, 1, "DE", "DE", new ArrayList<Service>()), is(0));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getResponsibleInstanceCount() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getResponsibleInstanceCount(), is(0));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getResponsibleServiceCount() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getResponsibleServiceCount(), is(0));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getResponsibleServices() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getResponsibleServices().isEmpty(), is(true));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getServiceCount() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getServiceCount(), is(0));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void getServiceMap() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getServiceMap("1234"), is(nullValue()));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void interests() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.interests("key"), is(false));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void matchUnlistenKey() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.matchUnlistenKey("key"), is(false));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void onChange() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException, Exception {

        // arrange
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        Service service1 = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        clusterMap.put("foo", new Cluster());
        service1.setClusterMap(clusterMap);
        service1.setName("Acme");

        // act
        service.onChange("key", service1);

        // assert
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void putService() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {

        // arrange
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        Service service1 = new Service();
        service1.setNamespaceId("1234");
        service1.setName("Acme");

        // act
        service.putService(service1);

        // assert
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }
}
