package com.alibaba.nacos.naming.boot;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import javax.servlet.ServletContext;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.context.WebServerInitializedEvent;
import org.springframework.boot.web.server.WebServer;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.boot.RunningConfig
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {RunningConfig.class})
@RunWith(SpringRunner.class)
public class RunningConfigTest {

    @MockBean(name = "servletContext")
    private ServletContext servletContext;

    @Autowired
    private RunningConfig service;

    @Test
    public void onApplicationEvent() throws javax.servlet.ServletException, java.net.MalformedURLException, org.springframework.boot.web.server.WebServerException {
        when(servletContext.getContextPath())
            .thenReturn("foo")
            .thenReturn("foo");
        WebServer webServer1 = mock(WebServer.class);
        when(webServer1.getPort())
            .thenReturn(0);
        WebServer webServer2 = mock(WebServer.class);
        when(webServer2.getPort())
            .thenReturn(1);
        WebServerInitializedEvent event = mock(WebServerInitializedEvent.class);
        when(event.getWebServer())
            .thenReturn(webServer2)
            .thenReturn(webServer1);
        service.onApplicationEvent(event);
    }
}
