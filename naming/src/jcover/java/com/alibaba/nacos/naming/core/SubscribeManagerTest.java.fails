package com.alibaba.nacos.naming.core;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.cluster.ServerListManager;
import com.alibaba.nacos.naming.cluster.servers.Server;
import com.alibaba.nacos.naming.pojo.Subscriber;
import com.alibaba.nacos.naming.push.PushService;

import java.util.ArrayList;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.core.SubscribeManager
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {SubscribeManager.class})
@RunWith(SpringRunner.class)
public class SubscribeManagerTest {

    @MockBean(name = "pushService")
    private PushService pushService;

    @MockBean(name = "serverListManager")
    private ServerListManager serverListManager;

    @Autowired
    private SubscribeManager service;

    @Test
    public void getSubscribersAggregationIsFalse() throws InterruptedException {
        when(pushService.getClients(Mockito.<String>any(), Mockito.<String>any()))
            .thenReturn(new ArrayList<Subscriber>());
        assertThat(service.getSubscribers("Acme", "1234", false), empty());
    }

    @Test
    public void getSubscribersAggregationIsTrue() throws InterruptedException {
        when(serverListManager.getHealthyServers())
            .thenReturn(new ArrayList<Server>());
        when(pushService.getClients(Mockito.<String>any(), Mockito.<String>any()))
            .thenReturn(new ArrayList<Subscriber>());
        assertThat(service.getSubscribers("Acme", "1234", true), empty());
    }
}
