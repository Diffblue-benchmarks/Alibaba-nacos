package com.alibaba.nacos.naming.consistency.persistent.raft;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.consistency.Datum;
import com.alibaba.nacos.naming.consistency.RecordListener;
import com.alibaba.nacos.naming.misc.GlobalConfig;
import com.alibaba.nacos.naming.misc.SwitchDomain;

import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentMap;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpMethod;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.consistency.persistent.raft.RaftCore
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {RaftCore.class})
@RunWith(SpringRunner.class)
public class RaftCoreTest {

    @MockBean(name = "globalConfig")
    private GlobalConfig globalConfig;

    @MockBean(name = "peers")
    private RaftPeerSet peers;

    @MockBean(name = "raftProxy")
    private RaftProxy raftProxy;

    @MockBean(name = "raftStore")
    private RaftStore raftStore;

    @MockBean(name = "switchDomain")
    private SwitchDomain switchDomain;

    @Autowired
    private RaftCore service;

    @Test
    public void getListeners() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        assertThat(service.getListeners().isEmpty(), is(true));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void signalDelete() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(peers.getLeader())
            .thenReturn(new RaftPeer());
        when(peers.isLeader(Mockito.<String>any()))
            .thenReturn(false);
        service.signalDelete("key");
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
        Mockito.verify(raftProxy).proxy(ArgumentMatchers.eq((String) null), ArgumentMatchers.eq("/v1/ns/raft/datum"), ArgumentMatchers.<Map<String, String>>any(), ArgumentMatchers.<HttpMethod>any());
    }

    @Test
    public void listen() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        RecordListener listener = mock(RecordListener.class);
        service.listen("key", listener);
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void unlisten() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        RecordListener listener = mock(RecordListener.class);
        service.unlisten("key", listener);
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void unlistenAll() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        service.unlistenAll("key");
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void isLeader2() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(peers.isLeader(Mockito.<String>any()))
            .thenReturn(false);
        assertThat(service.isLeader("DE"), is(false));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void isLeader4() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(peers.isLeader(Mockito.<String>any()))
            .thenReturn(true);
        assertThat(service.isLeader("DE"), is(true));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void isLeader1() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(peers.isLeader(Mockito.<String>any()))
            .thenReturn(false);
        assertThat(service.isLeader(), is(false));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void isLeader3() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(peers.isLeader(Mockito.<String>any()))
            .thenReturn(true);
        assertThat(service.isLeader(), is(true));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void getDatum() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        assertThat(service.getDatum("key"), is(nullValue()));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void getLeader() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(peers.getLeader())
            .thenReturn(new RaftPeer());
        // pojo RaftPeer
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void getPeers() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(peers.allPeers())
            .thenReturn(new LinkedList<RaftPeer>());
        assertThat(service.getPeers(), empty());
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void getPeerSet() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        assertThat(service.getPeerSet(), is(notNullValue()));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void setPeerSet() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        RaftPeerSet peerSet = mock(RaftPeerSet.class);
        service.setPeerSet(peerSet);
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void datumSize1() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        assertThat(service.datumSize(), is(0));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void datumSize2() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(raftStore.loadMeta())
            .thenReturn(new Properties());
        assertThat(service.datumSize(), is(0));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
        Mockito.verify(peers).setTerm(ArgumentMatchers.eq((Long) 0L));
    }

    @Test
    public void datumSize3() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        when(raftStore.loadMeta())
            .thenReturn(properties);
        when(peers.getTerm())
            .thenReturn(1L);
        assertThat(service.datumSize(), is(0));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
        Mockito.verify(peers).setTerm(ArgumentMatchers.eq((Long) 0L));
    }

    @Test
    public void loadDatum1() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(raftStore.load(Mockito.<String>any()))
            .thenReturn(new Datum());
        when(raftStore.loadMeta())
            .thenReturn(new Properties());
        service.loadDatum("key");
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
        Mockito.verify(peers).setTerm(ArgumentMatchers.eq((Long) 0L));
    }

    @Test
    public void loadDatum2() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(raftStore.load(Mockito.<String>any()))
            .thenReturn(new Datum());
        when(raftStore.loadMeta())
            .thenReturn(new Properties());
        service.loadDatum(null);
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
        Mockito.verify(peers).setTerm(ArgumentMatchers.eq((Long) 0L));
    }

    @Test
    public void isInitialized1() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(globalConfig.isDataWarmup())
            .thenReturn(false);
        assertThat(service.isInitialized(), is(true));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void isInitialized2() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(raftStore.loadMeta())
            .thenReturn(new Properties());
        when(peers.getTerm())
            .thenReturn(1L);
        assertThat(service.isInitialized(), is(true));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
        Mockito.verify(peers).setTerm(ArgumentMatchers.eq((Long) 0L));
    }

    @Test
    public void isInitialized3() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        when(globalConfig.isDataWarmup())
            .thenReturn(true);
        assertThat(service.isInitialized(), is(false));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }

    @Test
    public void getNotifyTaskCount() throws CloneNotSupportedException, Exception, java.io.IOException, org.springframework.beans.BeansException {
        assertThat(service.getNotifyTaskCount(), is(0));
        Mockito.verify(raftStore).loadDatums(ArgumentMatchers.<RaftCore.Notifier>any(), ArgumentMatchers.<ConcurrentMap<String, Datum>>any());
    }
}
