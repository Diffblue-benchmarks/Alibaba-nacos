package com.alibaba.nacos.naming.controllers;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.alibaba.nacos.naming.core.DistroMapper;
import com.alibaba.nacos.naming.core.ServiceManager;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * Unit tests for com.alibaba.nacos.naming.controllers.ApiController
 *
 * @author Diffblue JCover
 */

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = ApiController.class)
public class ApiControllerTest {

    @MockBean(name = "distroMapper")
    private DistroMapper distroMapper;

    @MockBean(name = "serviceManager")
    private ServiceManager serviceManager;

    @Autowired
    private ApiController controller;

    @Test(timeout=10000)
    public void allDomNames1() throws Exception {
        when(serviceManager.getAllServiceNames())
            .thenReturn(new java.util.HashMap<String, java.util.Set<String>>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/api/allDomNames", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"count\":0,\"doms\":{}}"));
    }

    @Test(timeout=10000)
    public void allDomNames2() throws Exception {
        Map<String, java.util.Set<String>> map = new HashMap<String, java.util.Set<String>>();
        ((HashMap<String, java.util.Set<String>>)map).put("foo", new HashSet<String>());
        when(serviceManager.getAllServiceNames())
            .thenReturn(map);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/api/allDomNames", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"count\":0,\"doms\":{\"foo\":[]}}"));
    }

    @Test(timeout=10000)
    public void hello() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/api/hello", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("text/plain;charset=ISO-8859-1"))
            .andExpect(content().string("ok"));
    }
}
