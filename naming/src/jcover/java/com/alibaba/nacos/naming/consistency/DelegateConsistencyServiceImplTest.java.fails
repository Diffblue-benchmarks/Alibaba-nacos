package com.alibaba.nacos.naming.consistency;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.consistency.ephemeral.EphemeralConsistencyService;
import com.alibaba.nacos.naming.consistency.persistent.PersistentConsistencyService;
import com.alibaba.nacos.naming.core.Instances;
import com.alibaba.nacos.naming.core.Service;
import com.alibaba.nacos.naming.pojo.Record;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.consistency.DelegateConsistencyServiceImpl
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {DelegateConsistencyServiceImpl.class})
@RunWith(SpringRunner.class)
public class DelegateConsistencyServiceImplTest {

    @MockBean(name = "ephemeralConsistencyService")
    private EphemeralConsistencyService ephemeralConsistencyService;

    @MockBean(name = "persistentConsistencyService")
    private PersistentConsistencyService persistentConsistencyService;

    @Autowired
    private DelegateConsistencyServiceImpl service;

    @Test
    public void put() throws com.alibaba.nacos.api.exception.NacosException {
        service.put("key", new Instances());
        Mockito.verify(persistentConsistencyService).put(ArgumentMatchers.eq("key"), ArgumentMatchers.<Record>any());
    }

    @Test
    public void remove() throws com.alibaba.nacos.api.exception.NacosException {
        service.remove("key");
        Mockito.verify(persistentConsistencyService).remove(ArgumentMatchers.eq("key"));
    }

    @Test
    public void getKeyIsKey() throws com.alibaba.nacos.api.exception.NacosException {
        when(persistentConsistencyService.get(Mockito.<String>any()))
            .thenReturn(new Datum());
        // pojo Datum
    }

    @Test
    public void listen1() throws com.alibaba.nacos.api.exception.NacosException {
        service.listen("com.alibaba.nacos.naming.domains.meta.", new Service());
        Mockito.verify(persistentConsistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
        Mockito.verify(ephemeralConsistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta."), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void listen2() throws com.alibaba.nacos.api.exception.NacosException {
        service.listen("key", new Service());
        Mockito.verify(persistentConsistencyService).listen(ArgumentMatchers.eq("key"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void unlisten() throws com.alibaba.nacos.api.exception.NacosException {
        service.unlisten("key", new Service());
        Mockito.verify(persistentConsistencyService).unlisten(ArgumentMatchers.eq("key"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void isAvailable1() throws com.alibaba.nacos.api.exception.NacosException {
        when(ephemeralConsistencyService.isAvailable())
            .thenReturn(false);
        assertThat(service.isAvailable(), is(false));
    }

    @Test
    public void isAvailable2() throws com.alibaba.nacos.api.exception.NacosException {
        when(persistentConsistencyService.isAvailable())
            .thenReturn(false);
        when(ephemeralConsistencyService.isAvailable())
            .thenReturn(true);
        assertThat(service.isAvailable(), is(false));
    }

    @Test
    public void isAvailableReturnsTrue() throws com.alibaba.nacos.api.exception.NacosException {
        when(persistentConsistencyService.isAvailable())
            .thenReturn(true);
        when(ephemeralConsistencyService.isAvailable())
            .thenReturn(true);
        assertThat(service.isAvailable(), is(true));
    }
}
