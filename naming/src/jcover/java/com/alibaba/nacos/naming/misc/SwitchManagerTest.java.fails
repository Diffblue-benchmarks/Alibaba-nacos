package com.alibaba.nacos.naming.misc;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.consistency.ConsistencyService;
import com.alibaba.nacos.naming.consistency.RecordListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.misc.SwitchManager
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {SwitchManager.class})
@RunWith(SpringRunner.class)
public class SwitchManagerTest {

    @MockBean(name = "consistencyService")
    private ConsistencyService consistencyService;

    @MockBean(name = "switchDomain")
    private SwitchDomain switchDomain;

    @Autowired
    private SwitchManager service;

    @Test
    public void getSwitchDomain() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {

        // arrange
        Map<String, Integer> map1 = new HashMap<String, Integer>();
        map1.put("foo", 1);
        Map<String, Integer> map2 = new HashMap<String, Integer>();
        map2.put("foo", 1);
        Map<String, Integer> map3 = new HashMap<String, Integer>();
        map3.put("foo", 1);
        Set<String> set3 = new HashSet<String>();
        SwitchDomain.HttpHealthParams switchDomain$HttpHealthParams1 =
             new SwitchDomain.HttpHealthParams();
        switchDomain$HttpHealthParams1.setFactor(1.0f);
        switchDomain$HttpHealthParams1.setMax(1);
        switchDomain$HttpHealthParams1.setMin(1);
        SwitchDomain.HttpHealthParams switchDomain$HttpHealthParams2 =
             new SwitchDomain.HttpHealthParams();
        switchDomain$HttpHealthParams2.setFactor(1.0f);
        switchDomain$HttpHealthParams2.setMax(1);
        switchDomain$HttpHealthParams2.setMin(1);
        SwitchDomain.HttpHealthParams switchDomain$HttpHealthParams3 =
             new SwitchDomain.HttpHealthParams();
        switchDomain$HttpHealthParams3.setFactor(1.0f);
        switchDomain$HttpHealthParams3.setMax(1);
        switchDomain$HttpHealthParams3.setMin(1);
        List<String> list3 = new ArrayList<String>();
        Map<String, Integer> map4 = new HashMap<String, Integer>();
        map4.put("foo", 1);
        Map<String, Integer> map5 = new HashMap<String, Integer>();
        map5.put("foo", 1);
        Map<String, Integer> map6 = new HashMap<String, Integer>();
        map6.put("foo", 1);
        List<String> list6 = new ArrayList<String>();
        SwitchDomain.MysqlHealthParams switchDomain$MysqlHealthParams1 =
             new SwitchDomain.MysqlHealthParams();
        switchDomain$MysqlHealthParams1.setFactor(1.0f);
        switchDomain$MysqlHealthParams1.setMax(1);
        switchDomain$MysqlHealthParams1.setMin(1);
        SwitchDomain.MysqlHealthParams switchDomain$MysqlHealthParams2 =
             new SwitchDomain.MysqlHealthParams();
        switchDomain$MysqlHealthParams2.setFactor(1.0f);
        switchDomain$MysqlHealthParams2.setMax(1);
        switchDomain$MysqlHealthParams2.setMin(1);
        SwitchDomain.MysqlHealthParams switchDomain$MysqlHealthParams3 =
             new SwitchDomain.MysqlHealthParams();
        switchDomain$MysqlHealthParams3.setFactor(1.0f);
        switchDomain$MysqlHealthParams3.setMax(1);
        switchDomain$MysqlHealthParams3.setMin(1);
        SwitchDomain.TcpHealthParams switchDomain$TcpHealthParams1 =
             new SwitchDomain.TcpHealthParams();
        switchDomain$TcpHealthParams1.setFactor(1.0f);
        switchDomain$TcpHealthParams1.setMax(1);
        switchDomain$TcpHealthParams1.setMin(1);
        SwitchDomain.TcpHealthParams switchDomain$TcpHealthParams2 =
             new SwitchDomain.TcpHealthParams();
        switchDomain$TcpHealthParams2.setFactor(1.0f);
        switchDomain$TcpHealthParams2.setMax(1);
        switchDomain$TcpHealthParams2.setMin(1);
        SwitchDomain.TcpHealthParams switchDomain$TcpHealthParams3 =
             new SwitchDomain.TcpHealthParams();
        switchDomain$TcpHealthParams3.setFactor(1.0f);
        switchDomain$TcpHealthParams3.setMax(1);
        switchDomain$TcpHealthParams3.setMin(1);
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        when(switchDomain.getAdWeightMap())
            .thenReturn(map1)
            .thenReturn(map2)
            .thenReturn(map3);
        when(switchDomain.getCheckTimes())
            .thenReturn(1)
            .thenReturn(1)
            .thenReturn(1);
        when(switchDomain.getChecksum())
            .thenReturn("foo")
            .thenReturn("foo")
            .thenReturn("foo");
        when(switchDomain.getClientBeatInterval())
            .thenReturn(1L)
            .thenReturn(1L)
            .thenReturn(1L);
        when(switchDomain.getDefaultCacheMillis())
            .thenReturn(1L)
            .thenReturn(1L)
            .thenReturn(1L);
        when(switchDomain.getDefaultPushCacheMillis())
            .thenReturn(1L)
            .thenReturn(1L)
            .thenReturn(1L);
        when(switchDomain.getDistroServerExpiredMillis())
            .thenReturn(1L)
            .thenReturn(1L)
            .thenReturn(1L);
        when(switchDomain.getDistroThreshold())
            .thenReturn(1.0f)
            .thenReturn(1.0f)
            .thenReturn(1.0f);
        when(switchDomain.getHealthCheckWhiteList())
            .thenReturn(new HashSet<String>())
            .thenReturn(new HashSet<String>())
            .thenReturn(set3);
        when(switchDomain.getHttpHealthParams())
            .thenReturn(switchDomain$HttpHealthParams1)
            .thenReturn(switchDomain$HttpHealthParams2)
            .thenReturn(switchDomain$HttpHealthParams3);
        when(switchDomain.getIncrementalList())
            .thenReturn(new ArrayList<String>())
            .thenReturn(new ArrayList<String>())
            .thenReturn(list3);
        when(switchDomain.getLimitedUrlMap())
            .thenReturn(map4)
            .thenReturn(map5)
            .thenReturn(map6);
        when(switchDomain.getMasters())
            .thenReturn(new ArrayList<String>())
            .thenReturn(new ArrayList<String>())
            .thenReturn(list6);
        when(switchDomain.getMysqlHealthParams())
            .thenReturn(switchDomain$MysqlHealthParams1)
            .thenReturn(switchDomain$MysqlHealthParams2)
            .thenReturn(switchDomain$MysqlHealthParams3);
        when(switchDomain.getName())
            .thenReturn("foo")
            .thenReturn("foo")
            .thenReturn("foo");
        when(switchDomain.getOverriddenServerStatus())
            .thenReturn("foo")
            .thenReturn("foo")
            .thenReturn("foo");
        when(switchDomain.getPushCVersion())
            .thenReturn("foo")
            .thenReturn("foo")
            .thenReturn("foo");
        when(switchDomain.getPushGoVersion())
            .thenReturn("foo")
            .thenReturn("foo")
            .thenReturn("foo");
        when(switchDomain.getPushJavaVersion())
            .thenReturn("foo")
            .thenReturn("foo")
            .thenReturn("foo");
        when(switchDomain.getPushPythonVersion())
            .thenReturn("foo")
            .thenReturn("foo")
            .thenReturn("foo");
        when(switchDomain.getServerStatusSynchronizationPeriodMillis())
            .thenReturn(1L)
            .thenReturn(1L)
            .thenReturn(1L);
        when(switchDomain.getServiceStatusSynchronizationPeriodMillis())
            .thenReturn(1L)
            .thenReturn(1L)
            .thenReturn(1L);
        when(switchDomain.getTcpHealthParams())
            .thenReturn(switchDomain$TcpHealthParams1)
            .thenReturn(switchDomain$TcpHealthParams2)
            .thenReturn(switchDomain$TcpHealthParams3);
        when(switchDomain.isDefaultInstanceEphemeral())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);
        when(switchDomain.isDisableAddIP())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);
        when(switchDomain.isDistroEnabled())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);
        when(switchDomain.isEnableAuthentication())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);
        when(switchDomain.isEnableStandalone())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);
        when(switchDomain.isHealthCheckEnabled())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);
        when(switchDomain.isPushEnabled())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);
        when(switchDomain.isSendBeatOnly())
            .thenReturn(false)
            .thenReturn(false)
            .thenReturn(false);

        // act
        SwitchDomain result = service.getSwitchDomain();

        // assert
        assertThat(result.getAdWeightMap(), sameInstance(map3));
        assertThat(result.getCheckTimes(), is(1));
        assertThat(result.getChecksum(), is("foo"));
        assertThat(result.getClientBeatInterval(), is(1L));
        assertThat(result.getDefaultCacheMillis(), is(1L));
        assertThat(result.getDefaultPushCacheMillis(), is(1L));
        assertThat(result.getDistroServerExpiredMillis(), is(1L));
        assertEquals(1.0f, result.getDistroThreshold(), 0);
        assertThat(result.getHealthCheckWhiteList(), sameInstance(set3));
        assertThat(result.getHttpHealthParams(), sameInstance(switchDomain$HttpHealthParams3));
        assertThat(result.getIncrementalList(), sameInstance(list3));
        assertThat(result.getLimitedUrlMap(), sameInstance(map6));
        assertThat(result.getMasters(), sameInstance(list6));
        assertThat(result.getMysqlHealthParams(), sameInstance(switchDomain$MysqlHealthParams3));
        assertThat(result.getName(), is("foo"));
        assertThat(result.getOverriddenServerStatus(), is("foo"));
        assertThat(result.getPushCVersion(), is("foo"));
        assertThat(result.getPushGoVersion(), is("foo"));
        assertThat(result.getPushJavaVersion(), is("foo"));
        assertThat(result.getPushPythonVersion(), is("foo"));
        assertThat(result.getServerStatusSynchronizationPeriodMillis(), is(1L));
        assertThat(result.getServiceStatusSynchronizationPeriodMillis(), is(1L));
        assertThat(result.getTcpHealthParams(), sameInstance(switchDomain$TcpHealthParams3));
        assertThat(result.isDefaultInstanceEphemeral(), is(false));
        assertThat(result.isDisableAddIP(), is(false));
        assertThat(result.isDistroEnabled(), is(false));
        assertThat(result.isEnableAuthentication(), is(false));
        assertThat(result.isEnableStandalone(), is(false));
        assertThat(result.isHealthCheckEnabled(), is(false));
        assertThat(result.isPushEnabled(), is(false));
        assertThat(result.isSendBeatOnly(), is(false));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta.00-00---000-NACOS_SWITCH_DOMAIN-000---00-00"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void interests() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.interests("key"), is(false));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta.00-00---000-NACOS_SWITCH_DOMAIN-000---00-00"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void matchUnlistenKey() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.matchUnlistenKey("key"), is(false));
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta.00-00---000-NACOS_SWITCH_DOMAIN-000---00-00"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void onChange() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException, Exception {

        // arrange
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        SwitchDomain domain = new SwitchDomain();
        domain.setCheckTimes(1);
        domain.setClientBeatInterval(1L);
        domain.setDefaultCacheMillis(1L);
        domain.setDefaultPushCacheMillis(1L);
        domain.setDistroEnabled(false);
        domain.setDistroServerExpiredMillis(1L);
        domain.setDistroThreshold(1.0f);
        domain.setEnableStandalone(false);
        domain.setHealthCheckEnabled(false);
        domain.setOverriddenServerStatus("/some/path.html");
        domain.setPushCVersion("1.0");
        domain.setPushEnabled(false);
        domain.setPushGoVersion("1.0");
        domain.setPushJavaVersion("1.0");
        domain.setPushPythonVersion("1.0");
        domain.setServerStatusSynchronizationPeriodMillis(1L);
        domain.setServiceStatusSynchronizationPeriodMillis(1L);

        // act
        service.onChange("key", domain);

        // assert
        Mockito.verify(switchDomain).setAdWeightMap(ArgumentMatchers.<Map<String, Integer>>any());
        Mockito.verify(switchDomain).setCheckTimes(ArgumentMatchers.eq((Integer) 1));
        Mockito.verify(switchDomain).setClientBeatInterval(ArgumentMatchers.eq((Long) 1L));
        Mockito.verify(switchDomain).setDefaultCacheMillis(ArgumentMatchers.eq((Long) 1L));
        Mockito.verify(switchDomain).setDefaultInstanceEphemeral(ArgumentMatchers.eq((Boolean) true));
        Mockito.verify(switchDomain).setDefaultPushCacheMillis(ArgumentMatchers.eq((Long) 1L));
        Mockito.verify(switchDomain).setDisableAddIP(ArgumentMatchers.eq((Boolean) false));
        Mockito.verify(switchDomain).setDistroEnabled(ArgumentMatchers.eq((Boolean) false));
        Mockito.verify(switchDomain).setDistroServerExpiredMillis(ArgumentMatchers.eq((Long) 1L));
        Mockito.verify(switchDomain).setDistroThreshold(ArgumentMatchers.eq((Float) 1.0f));
        Mockito.verify(switchDomain).setEnableAuthentication(ArgumentMatchers.eq((Boolean) false));
        Mockito.verify(switchDomain).setEnableStandalone(ArgumentMatchers.eq((Boolean) false));
        Mockito.verify(switchDomain).setHealthCheckEnabled(ArgumentMatchers.eq((Boolean) false));
        Mockito.verify(switchDomain).setHttpHealthParams(ArgumentMatchers.<SwitchDomain.HttpHealthParams>any());
        Mockito.verify(switchDomain).setIncrementalList(ArgumentMatchers.<List<String>>any());
        Mockito.verify(switchDomain).setLimitedUrlMap(ArgumentMatchers.<Map<String, Integer>>any());
        Mockito.verify(switchDomain).setMasters(ArgumentMatchers.<List<String>>any());
        Mockito.verify(switchDomain).setMysqlHealthParams(ArgumentMatchers.<SwitchDomain.MysqlHealthParams>any());
        Mockito.verify(switchDomain).setOverriddenServerStatus(ArgumentMatchers.eq("/some/path.html"));
        Mockito.verify(switchDomain).setPushCVersion(ArgumentMatchers.eq("1.0"));
        Mockito.verify(switchDomain).setPushEnabled(ArgumentMatchers.eq((Boolean) false));
        Mockito.verify(switchDomain).setPushGoVersion(ArgumentMatchers.eq("1.0"));
        Mockito.verify(switchDomain).setPushJavaVersion(ArgumentMatchers.eq("1.0"));
        Mockito.verify(switchDomain).setPushPythonVersion(ArgumentMatchers.eq("1.0"));
        Mockito.verify(switchDomain).setSendBeatOnly(ArgumentMatchers.eq((Boolean) false));
        Mockito.verify(switchDomain).setServerStatusSynchronizationPeriodMillis(ArgumentMatchers.eq((Long) 1L));
        Mockito.verify(switchDomain).setServiceStatusSynchronizationPeriodMillis(ArgumentMatchers.eq((Long) 1L));
        Mockito.verify(switchDomain).setTcpHealthParams(ArgumentMatchers.<SwitchDomain.TcpHealthParams>any());
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta.00-00---000-NACOS_SWITCH_DOMAIN-000---00-00"), ArgumentMatchers.<RecordListener>any());
    }

    @Test
    public void onDelete() throws CloneNotSupportedException, com.alibaba.nacos.api.exception.NacosException, Exception {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        service.onDelete("key");
        Mockito.verify(consistencyService).listen(ArgumentMatchers.eq("com.alibaba.nacos.naming.domains.meta.00-00---000-NACOS_SWITCH_DOMAIN-000---00-00"), ArgumentMatchers.<RecordListener>any());
    }
}
