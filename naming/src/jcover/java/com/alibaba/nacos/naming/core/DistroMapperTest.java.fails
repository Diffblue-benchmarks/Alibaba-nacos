package com.alibaba.nacos.naming.core;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.cluster.ServerListManager;
import com.alibaba.nacos.naming.cluster.servers.Server;
import com.alibaba.nacos.naming.cluster.servers.ServerChangeListener;
import com.alibaba.nacos.naming.misc.SwitchDomain;

import java.util.ArrayList;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.core.DistroMapper
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {DistroMapper.class})
@RunWith(SpringRunner.class)
public class DistroMapperTest {

    @MockBean(name = "serverListManager")
    private ServerListManager serverListManager;

    @MockBean(name = "switchDomain")
    private SwitchDomain switchDomain;

    @Autowired
    private DistroMapper service;

    @Test
    public void distroHash1() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.distroHash("Acme"), is(2_035_034));
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void distroHash2() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.distroHash(""), is(0));
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void getHealthyList() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.getHealthyList(), empty());
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void mapSrv() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        assertThat(service.mapSrv("Acme"), is("10.128.0.69:0"));
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void onChangeHealthyServerList1() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        service.onChangeHealthyServerList(new ArrayList<Server>());
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void onChangeHealthyServerList2() throws CloneNotSupportedException {

        // arrange
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        ArrayList<Server> latestReachableMembers = new ArrayList<Server>();
        latestReachableMembers.add(new Server());

        // act
        service.onChangeHealthyServerList(latestReachableMembers);

        // assert
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void onChangeServerList() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        service.onChangeServerList(new ArrayList<Server>());
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void responsible1() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        when(switchDomain.isDistroEnabled())
            .thenReturn(false);
        assertThat(service.responsible("Acme"), is(true));
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }

    @Test
    public void responsible2() throws CloneNotSupportedException {
        // inaccessible mock: SwitchDomain.clone
        // inaccessible mock: SwitchDomain.clone
        when(switchDomain.isHealthCheckEnabled(Mockito.<String>any()))
            .thenReturn(false);
        assertThat(service.responsible(new Cluster(), new Instance()), is(false));
        Mockito.verify(serverListManager).listen(ArgumentMatchers.<ServerChangeListener>any());
    }
}
