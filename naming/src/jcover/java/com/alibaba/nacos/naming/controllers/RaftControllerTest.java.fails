package com.alibaba.nacos.naming.controllers;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.alibaba.nacos.naming.consistency.persistent.raft.RaftConsistencyServiceImpl;
import com.alibaba.nacos.naming.consistency.persistent.raft.RaftCore;
import com.alibaba.nacos.naming.consistency.persistent.raft.RaftPeer;
import com.alibaba.nacos.naming.core.ServiceManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * Unit tests for com.alibaba.nacos.naming.controllers.RaftController
 *
 * @author Diffblue JCover
 */

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = RaftController.class)
public class RaftControllerTest {

    @MockBean(name = "raftConsistencyService")
    private RaftConsistencyServiceImpl raftConsistencyService;

    @MockBean(name = "serviceManager")
    private ServiceManager serviceManager;

    @MockBean(name = "raftCore")
    private RaftCore raftCore;

    @Autowired
    private RaftController controller;

    @Test(timeout=10000)
    public void getAllListeners1() throws Exception {
        when(raftCore.getListeners())
            .thenReturn(new java.util.HashMap<String, java.util.List<com.alibaba.nacos.naming.consistency.RecordListener>>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/listeners", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"listeners\":[]}"));
    }

    @Test(timeout=10000)
    public void getAllListeners2() throws Exception {
        Map<String, java.util.List<com.alibaba.nacos.naming.consistency.RecordListener>> map = new HashMap<String, java.util.List<com.alibaba.nacos.naming.consistency.RecordListener>>();
        ((HashMap<String, java.util.List<com.alibaba.nacos.naming.consistency.RecordListener>>)map).put("foo", new ArrayList<com.alibaba.nacos.naming.consistency.RecordListener>());
        when(raftCore.getListeners())
            .thenReturn(map);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/listeners", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"listeners\":[\"foo\"]}"));
    }

    @Test(timeout=10000)
    public void getLeader() throws Exception {
        when(raftCore.getLeader())
            .thenReturn(new com.alibaba.nacos.naming.consistency.persistent.raft.RaftPeer());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/leader", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"leader\":\"{\\\"heartbeatDueMs\\\":3368,\\\"leaderDueMs\\\":9072,\\\"state\\\":\\\"FOLLOWER\\\",\\\"term\\\":0}\"}"));
    }

    @Test(timeout=10000)
    public void getPeer1() throws Exception {
        when(raftCore.getPeers())
            .thenReturn(new ArrayList<com.alibaba.nacos.naming.consistency.persistent.raft.RaftPeer>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/peer", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"ip\":\"10.128.0.37:0\",\"heartbeatDueMs\":2168,\"leaderDueMs\":6779,\"term\":0,\"state\":\"FOLLOWER\"}"));
    }

    @Test(timeout=10000)
    public void getPeer2() throws Exception {
        List<RaftPeer> list = new ArrayList<RaftPeer>();
        ((ArrayList<RaftPeer>)list).add(new RaftPeer());
        when(raftCore.getPeers())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/peer", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"ip\":\"10.128.0.37:0\",\"heartbeatDueMs\":3004,\"leaderDueMs\":199,\"term\":0,\"state\":\"FOLLOWER\"}"));
    }

    @Test(timeout=10000)
    public void state() throws Exception {
        when(serviceManager.getServiceCount())
            .thenReturn(1);
        when(raftCore.getPeers())
            .thenReturn(new ArrayList<RaftPeer>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/state", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json; charset=UTF-8"))
            .andExpect(content().string("{\"peers\":[],\"services\":1}"));
    }
}
