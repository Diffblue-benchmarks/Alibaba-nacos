package com.alibaba.nacos.naming.controllers;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.alibaba.nacos.naming.consistency.RecordListener;
import com.alibaba.nacos.naming.consistency.persistent.raft.RaftConsistencyServiceImpl;
import com.alibaba.nacos.naming.consistency.persistent.raft.RaftCore;
import com.alibaba.nacos.naming.consistency.persistent.raft.RaftPeer;
import com.alibaba.nacos.naming.core.ServiceManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * Unit tests for com.alibaba.nacos.naming.controllers.RaftController
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {RaftController.class})
@RunWith(SpringRunner.class)
public class RaftControllerTest {

    @MockBean(name = "raftConsistencyService")
    private RaftConsistencyServiceImpl raftConsistencyService;

    @MockBean(name = "raftCore")
    private RaftCore raftCore;

    @MockBean(name = "serviceManager")
    private ServiceManager serviceManager;

    @Autowired
    private RaftController controller;

    @Test
    public void getPeer1() throws Exception {
        List<RaftPeer> list = new ArrayList<RaftPeer>();
        list.add(new RaftPeer());
        when(raftCore.getPeers())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller)
            .build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/peer"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().json("{\"ip\":\"10.1.0.4:0\",\"heartbeatDueMs\":246,\"leaderDueMs\":11001,\"term\":0,\"state\":\"FOLLOWER\"}"));
    }

    @Test
    public void getPeer2() throws Exception {
        when(raftCore.getPeers())
            .thenReturn(new ArrayList<RaftPeer>());
        MockMvcBuilders.standaloneSetup(controller)
            .build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/peer"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().json("{\"ip\":\"10.1.0.4:0\",\"heartbeatDueMs\":4737,\"leaderDueMs\":2164,\"term\":0,\"state\":\"FOLLOWER\"}"));
    }

    @Test
    public void state() throws Exception {
        when(serviceManager.getServiceCount())
            .thenReturn(1);
        when(raftCore.getPeers())
            .thenReturn(new ArrayList<RaftPeer>());
        MockMvcBuilders.standaloneSetup(controller)
            .build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/state"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json; charset=UTF-8"))
            .andExpect(content().json("{\"peers\":[],\"services\":1}"));
    }

    @Test
    public void getLeader() throws Exception {
        when(raftCore.getLeader())
            .thenReturn(new RaftPeer());
        MockMvcBuilders.standaloneSetup(controller)
            .build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/leader"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().json("{\"leader\":\"{\\\"heartbeatDueMs\\\":2464,\\\"leaderDueMs\\\":8856,\\\"state\\\":\\\"FOLLOWER\\\",\\\"term\\\":0}\"}"));
    }

    @Test
    public void getAllListeners() throws Exception {
        when(raftCore.getListeners())
            .thenReturn(new HashMap<String, List<RecordListener>>());
        MockMvcBuilders.standaloneSetup(controller)
            .build().perform(
            MockMvcRequestBuilders.get("/v1/ns/raft/listeners"))
            .andExpect(status().isOk())
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().json("{\"listeners\":[]}"));
    }
}
