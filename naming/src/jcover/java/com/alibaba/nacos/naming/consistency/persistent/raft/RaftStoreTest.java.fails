package com.alibaba.nacos.naming.consistency.persistent.raft;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.naming.consistency.Datum;

import java.util.concurrent.ConcurrentMap;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * Unit tests for com.alibaba.nacos.naming.consistency.persistent.raft.RaftStore
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {RaftStore.class})
@RunWith(SpringRunner.class)
public class RaftStoreTest {

    @Autowired
    private RaftStore service;

    @Test
    public void loadDatums() throws Exception {
        RaftCore this$0 = new RaftCore();
        this$0.setPeerSet(new RaftPeerSet());
        @SuppressWarnings("unchecked")
        ConcurrentMap<String, Datum> datums = mock(ConcurrentMap.class);
        when(datums.size())
            .thenReturn(1);
        service.loadDatums(this$0.new Notifier(), datums);
    }

    @Test
    public void loadKeyIsKeyReturnsNull() throws Exception {
        assertThat(service.load("key"), is(nullValue()));
    }

    @Test
    public void loadMeta() throws Exception {
        assertThat(service.loadMeta().getProperty("term"), is("1"));
    }

    @Test
    public void updateTermTermIsOne() throws Exception {
        service.updateTerm(1L);
    }
}
