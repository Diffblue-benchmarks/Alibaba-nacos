package com.alibaba.nacos.naming.misc;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.hamcrest.number.IsCloseTo.closeTo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.misc.SwitchDomain
 *
 * @author Diffblue JCover
 */

public class SwitchDomainTest {

    @Test(timeout=10000)
    public void getAdWeightKeyIsFooReturnsNull() {
        assertThat(new SwitchDomain().getAdWeight("foo"), is(nullValue()));
    }

    @Test(timeout=10000)
    public void getAdWeightMapReturnsEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        Map<String, Integer> result = switchDomain.getAdWeightMap();
        assertThat(result.isEmpty(), is(true));
        assertThat(switchDomain.getAdWeightMap(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getCheckTimesReturnsThree() {
        assertThat(new SwitchDomain().getCheckTimes(), is(3));
    }

    @Test(timeout=10000)
    public void getClientBeatInterval() {
        assertThat(new SwitchDomain().getClientBeatInterval(), is(5_000L));
    }

    @Test(timeout=10000)
    public void getDefaultCacheMillis() {
        assertThat(new SwitchDomain().getDefaultCacheMillis(), is(3_000L));
    }

    @Test(timeout=10000)
    public void getDefaultPushCacheMillis() {
        assertThat(new SwitchDomain().getDefaultPushCacheMillis(), is(10_000L));
    }

    @Test(timeout=10000)
    public void getDistroServerExpiredMillis() {
        assertThat(new SwitchDomain().getDistroServerExpiredMillis(), is(30_000L));
    }

    @Test(timeout=10000)
    public void getDistroThreshold() {
        assertThat(new SwitchDomain().getDistroThreshold(), closeTo(0x1.666666p-1f /* 0.7 */, 0.0));
    }

    @Test(timeout=10000)
    public void getHealthCheckWhiteListReturnsEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        Set<String> result = switchDomain.getHealthCheckWhiteList();
        assertThat(result, empty());
        assertThat(switchDomain.getHealthCheckWhiteList(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getHttpHealthParams() {
        SwitchDomain switchDomain = new SwitchDomain();
        SwitchDomain.HttpHealthParams result = switchDomain.getHttpHealthParams();
        assertThat(result.getFactor(), closeTo(0x1.b33334p-1f /* 0.85 */, 0.0));
        assertThat(result.getMax(), is(5_000));
        assertThat(result.getMin(), is(500));
        assertThat(switchDomain.getHttpHealthParams(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getIncrementalListReturnsEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        List<String> result = switchDomain.getIncrementalList();
        assertThat(result, empty());
        assertThat(switchDomain.getIncrementalList(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getLimitedUrlMapReturnsEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        Map<String, Integer> result = switchDomain.getLimitedUrlMap();
        assertThat(result.isEmpty(), is(true));
        assertThat(switchDomain.getLimitedUrlMap(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getMysqlHealthParams() {
        SwitchDomain switchDomain = new SwitchDomain();
        SwitchDomain.MysqlHealthParams result = switchDomain.getMysqlHealthParams();
        assertThat(result.getFactor(), closeTo(0x1.4cccccp-1f /* 0.65 */, 0.0));
        assertThat(result.getMax(), is(3_000));
        assertThat(result.getMin(), is(2_000));
        assertThat(switchDomain.getMysqlHealthParams(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getName() {
        assertThat(new SwitchDomain().getName(), is("00-00---000-NACOS_SWITCH_DOMAIN-000---00-00"));
    }

    @Test(timeout=10000)
    public void getPushCacheMillis() {
        assertThat(new SwitchDomain().getPushCacheMillis("0.1.0"), is(10_000L));
    }

    @Test(timeout=10000)
    public void getPushCVersion() {
        assertThat(new SwitchDomain().getPushCVersion(), is("1.0.12"));
    }

    @Test(timeout=10000)
    public void getPushGoVersion() {
        assertThat(new SwitchDomain().getPushGoVersion(), is("0.1.0"));
    }

    @Test(timeout=10000)
    public void getPushJavaVersion() {
        assertThat(new SwitchDomain().getPushJavaVersion(), is("0.1.0"));
    }

    @Test(timeout=10000)
    public void getPushPythonVersion() {
        assertThat(new SwitchDomain().getPushPythonVersion(), is("0.4.3"));
    }

    @Test(timeout=10000)
    public void getServerStatusSynchronizationPeriodMillis() {
        assertThat(new SwitchDomain().getServerStatusSynchronizationPeriodMillis(), is(15_000L));
    }

    @Test(timeout=10000)
    public void getServiceStatusSynchronizationPeriodMillis() {
        assertThat(new SwitchDomain().getServiceStatusSynchronizationPeriodMillis(), is(5_000L));
    }

    @Test(timeout=10000)
    public void getTcpHealthParams() {
        SwitchDomain switchDomain = new SwitchDomain();
        SwitchDomain.TcpHealthParams result = switchDomain.getTcpHealthParams();
        assertThat(result.getFactor(), closeTo(0.75f, 0.0));
        assertThat(result.getMax(), is(5_000));
        assertThat(result.getMin(), is(1_000));
        assertThat(switchDomain.getTcpHealthParams(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void isDefaultInstanceEphemeralReturnsTrue() {
        assertThat(new SwitchDomain().isDefaultInstanceEphemeral(), is(true));
    }

    @Test(timeout=10000)
    public void isDisableAddIPReturnsFalse() {
        assertThat(new SwitchDomain().isDisableAddIP(), is(false));
    }

    @Test(timeout=10000)
    public void isDistroEnabledReturnsTrue() {
        assertThat(new SwitchDomain().isDistroEnabled(), is(true));
    }

    @Test(timeout=10000)
    public void isEnableAuthenticationReturnsFalse() {
        assertThat(new SwitchDomain().isEnableAuthentication(), is(false));
    }

    @Test(timeout=10000)
    public void isEnableStandaloneReturnsTrue() {
        assertThat(new SwitchDomain().isEnableStandalone(), is(true));
    }

    @Test(timeout=10000)
    public void isHealthCheckEnabled() {
        assertThat(new SwitchDomain().isHealthCheckEnabled(), is(true));
        assertThat(new SwitchDomain().isHealthCheckEnabled("0.1.0"), is(true));
    }

    @Test(timeout=10000)
    public void isPushEnabledReturnsTrue() {
        assertThat(new SwitchDomain().isPushEnabled(), is(true));
    }

    @Test(timeout=10000)
    public void isSendBeatOnlyReturnsFalse() {
        assertThat(new SwitchDomain().isSendBeatOnly(), is(false));
    }

    @Test(timeout=10000)
    public void setAdWeightMapToEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        Map<String, Integer> adWeightMap = new HashMap<String, Integer>();
        switchDomain.setAdWeightMap(adWeightMap);
        assertThat(switchDomain.getAdWeightMap(), sameInstance(adWeightMap));
    }

    @Test(timeout=10000)
    public void setCheckTimesToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setCheckTimes(1);
        assertThat(switchDomain.getCheckTimes(), is(1));
    }

    @Test(timeout=10000)
    public void setClientBeatIntervalToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setClientBeatInterval(1L);
        assertThat(switchDomain.getClientBeatInterval(), is(1L));
    }

    @Test(timeout=10000)
    public void setDefaultCacheMillisToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setDefaultCacheMillis(1L);
        assertThat(switchDomain.getDefaultCacheMillis(), is(1L));
    }

    @Test(timeout=10000)
    public void setDefaultInstanceEphemeralToFalse() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setDefaultInstanceEphemeral(false);
        assertThat(switchDomain.isDefaultInstanceEphemeral(), is(false));
    }

    @Test(timeout=10000)
    public void setDefaultPushCacheMillisToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setDefaultPushCacheMillis(1L);
        assertThat(switchDomain.getDefaultPushCacheMillis(), is(1L));
    }

    @Test(timeout=10000)
    public void setDisableAddIPToFalse() {
        new SwitchDomain().setDisableAddIP(false);
    }

    @Test(timeout=10000)
    public void setDistroEnabledToFalse() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setDistroEnabled(false);
        assertThat(switchDomain.isDistroEnabled(), is(false));
    }

    @Test(timeout=10000)
    public void setDistroServerExpiredMillisToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setDistroServerExpiredMillis(1L);
        assertThat(switchDomain.getDistroServerExpiredMillis(), is(1L));
    }

    @Test(timeout=10000)
    public void setDistroThresholdToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setDistroThreshold(1.0f);
        assertThat(switchDomain.getDistroThreshold(), closeTo(1.0f, 0.0));
    }

    @Test(timeout=10000)
    public void setEnableAuthenticationToFalse() {
        new SwitchDomain().setEnableAuthentication(false);
    }

    @Test(timeout=10000)
    public void setEnableStandaloneToFalse() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setEnableStandalone(false);
        assertThat(switchDomain.isEnableStandalone(), is(false));
    }

    @Test(timeout=10000)
    public void setHealthCheckEnabledToFalse() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setHealthCheckEnabled(false);
        assertThat(switchDomain.isHealthCheckEnabled(), is(false));
    }

    @Test(timeout=10000)
    public void setHealthCheckWhiteListToEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        Set<String> healthCheckWhiteList = new HashSet<String>();
        switchDomain.setHealthCheckWhiteList(healthCheckWhiteList);
        assertThat(switchDomain.getHealthCheckWhiteList(), sameInstance(healthCheckWhiteList));
    }

    @Test(timeout=10000)
    public void setHttpHealthParams() {
        SwitchDomain switchDomain = new SwitchDomain();
        SwitchDomain.HttpHealthParams httpHealthParams = new SwitchDomain.HttpHealthParams();
        switchDomain.setHttpHealthParams(httpHealthParams);
        assertThat(switchDomain.getHttpHealthParams(), sameInstance(httpHealthParams));
    }

    @Test(timeout=10000)
    public void setIncrementalListToEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        List<String> incrementalList = new ArrayList<String>();
        switchDomain.setIncrementalList(incrementalList);
        assertThat(switchDomain.getIncrementalList(), sameInstance(incrementalList));
    }

    @Test(timeout=10000)
    public void setLimitedUrlMapToEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        Map<String, Integer> limitedUrlMap = new HashMap<String, Integer>();
        switchDomain.setLimitedUrlMap(limitedUrlMap);
        assertThat(switchDomain.getLimitedUrlMap(), sameInstance(limitedUrlMap));
    }

    @Test(timeout=10000)
    public void setMastersToEmpty() {
        SwitchDomain switchDomain = new SwitchDomain();
        List<String> masters = new ArrayList<String>();
        switchDomain.setMasters(masters);
        assertThat(switchDomain.getMasters(), sameInstance(masters));
    }

    @Test(timeout=10000)
    public void setMysqlHealthParams() {
        SwitchDomain switchDomain = new SwitchDomain();
        SwitchDomain.MysqlHealthParams mysqlHealthParams = new SwitchDomain.MysqlHealthParams();
        switchDomain.setMysqlHealthParams(mysqlHealthParams);
        assertThat(switchDomain.getMysqlHealthParams(), sameInstance(mysqlHealthParams));
    }

    @Test(timeout=10000)
    public void setOverriddenServerStatus() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setOverriddenServerStatus("New York");
        assertThat(switchDomain.getOverriddenServerStatus(), is("New York"));
    }

    @Test(timeout=10000)
    public void setPushCVersionToMr() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setPushCVersion("Mr");
        assertThat(switchDomain.getPushCVersion(), is("Mr"));
    }

    @Test(timeout=10000)
    public void setPushEnabledToFalse() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setPushEnabled(false);
        assertThat(switchDomain.isPushEnabled(), is(false));
    }

    @Test(timeout=10000)
    public void setPushGoVersionToMr() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setPushGoVersion("Mr");
        assertThat(switchDomain.getPushGoVersion(), is("Mr"));
    }

    @Test(timeout=10000)
    public void setPushJavaVersionToMr() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setPushJavaVersion("Mr");
        assertThat(switchDomain.getPushJavaVersion(), is("Mr"));
    }

    @Test(timeout=10000)
    public void setPushPythonVersionToMr() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setPushPythonVersion("Mr");
        assertThat(switchDomain.getPushPythonVersion(), is("Mr"));
    }

    @Test(timeout=10000)
    public void setSendBeatOnlyToFalse() {
        new SwitchDomain().setSendBeatOnly(false);
    }

    @Test(timeout=10000)
    public void setServerStatusSynchronizationPeriodMillisToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setServerStatusSynchronizationPeriodMillis(1L);
        assertThat(switchDomain.getServerStatusSynchronizationPeriodMillis(), is(1L));
    }

    @Test(timeout=10000)
    public void setServiceStatusSynchronizationPeriodMillisToOne() {
        SwitchDomain switchDomain = new SwitchDomain();
        switchDomain.setServiceStatusSynchronizationPeriodMillis(1L);
        assertThat(switchDomain.getServiceStatusSynchronizationPeriodMillis(), is(1L));
    }

    @Test(timeout=10000)
    public void setTcpHealthParams() {
        SwitchDomain switchDomain = new SwitchDomain();
        SwitchDomain.TcpHealthParams tcpHealthParams = new SwitchDomain.TcpHealthParams();
        switchDomain.setTcpHealthParams(tcpHealthParams);
        assertThat(switchDomain.getTcpHealthParams(), sameInstance(tcpHealthParams));
    }

    @Test(timeout=10000)
    public void testclone() throws CloneNotSupportedException {
        SwitchDomain result = new SwitchDomain().clone();
        assertThat(result.getAdWeightMap().isEmpty(), is(true));
        assertThat(result.getCheckTimes(), is(3));
        assertThat(result.getChecksum(), is(nullValue()));
        assertThat(result.getClientBeatInterval(), is(5_000L));
        assertThat(result.getDefaultCacheMillis(), is(3_000L));
        assertThat(result.getDefaultPushCacheMillis(), is(10_000L));
        assertThat(result.getDistroServerExpiredMillis(), is(30_000L));
        assertThat(result.getDistroThreshold(), closeTo(0x1.666666p-1f /* 0.7 */, 0.0));
        assertThat(result.getHealthCheckWhiteList(), empty());
        assertThat(result.getHttpHealthParams().getFactor(), closeTo(0x1.b33334p-1f /* 0.85 */, 0.0));
        assertThat(result.getHttpHealthParams().getMax(), is(5_000));
        assertThat(result.getHttpHealthParams().getMin(), is(500));
        assertThat(result.getIncrementalList(), empty());
        assertThat(result.getLimitedUrlMap().isEmpty(), is(true));
        assertThat(result.getMasters(), is(nullValue()));
        assertThat(result.getMysqlHealthParams().getFactor(), closeTo(0x1.4cccccp-1f /* 0.65 */, 0.0));
        assertThat(result.getMysqlHealthParams().getMax(), is(3_000));
        assertThat(result.getMysqlHealthParams().getMin(), is(2_000));
        assertThat(result.getName(), is("00-00---000-NACOS_SWITCH_DOMAIN-000---00-00"));
        assertThat(result.getOverriddenServerStatus(), is(nullValue()));
        assertThat(result.getPushCVersion(), is("1.0.12"));
        assertThat(result.getPushGoVersion(), is("0.1.0"));
        assertThat(result.getPushJavaVersion(), is("0.1.0"));
        assertThat(result.getPushPythonVersion(), is("0.4.3"));
        assertThat(result.getServerStatusSynchronizationPeriodMillis(), is(15_000L));
        assertThat(result.getServiceStatusSynchronizationPeriodMillis(), is(5_000L));
        assertThat(result.getTcpHealthParams().getFactor(), closeTo(0.75f, 0.0));
        assertThat(result.getTcpHealthParams().getMax(), is(5_000));
        assertThat(result.getTcpHealthParams().getMin(), is(1_000));
        assertThat(result.isDefaultInstanceEphemeral(), is(true));
        assertThat(result.isDisableAddIP(), is(false));
        assertThat(result.isDistroEnabled(), is(true));
        assertThat(result.isEnableAuthentication(), is(false));
        assertThat(result.isEnableStandalone(), is(true));
        assertThat(result.isHealthCheckEnabled(), is(true));
        assertThat(result.isPushEnabled(), is(true));
        assertThat(result.isSendBeatOnly(), is(false));
    }

    @Test(timeout=10000)
    public void update() {
        new SwitchDomain().update(new SwitchDomain());
    }
}
