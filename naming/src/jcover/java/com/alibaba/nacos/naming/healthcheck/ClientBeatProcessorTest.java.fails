package com.alibaba.nacos.naming.healthcheck;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.pojo.AbstractHealthChecker;
import com.alibaba.nacos.naming.core.Cluster;
import com.alibaba.nacos.naming.core.Service;
import com.alibaba.nacos.naming.selector.Selector;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.healthcheck.ClientBeatProcessor
 *
 * @author Diffblue Cover
 */

public class ClientBeatProcessorTest {

    @Test
    public void factory() throws CloneNotSupportedException {
        ClientBeatProcessor clientBeatProcessor = new ClientBeatProcessor();
        RsInfo rsInfo = new RsInfo();
        rsInfo.setAk("foo");
        rsInfo.setCluster("John Smith");
        rsInfo.setCpu(1.0);
        rsInfo.setEphemeral(false);
        rsInfo.setIp("foo");
        rsInfo.setLoad(1.0);
        rsInfo.setMem(1.0);
        HashMap<String, String> metadata1 = new HashMap<String, String>();
        metadata1.put("foo", "foo");
        rsInfo.setMetadata(metadata1);
        rsInfo.setPort(1);
        rsInfo.setQps(1.0);
        rsInfo.setRt(1.0);
        rsInfo.setServiceName("Acme");
        rsInfo.setWeight(1.0);
        clientBeatProcessor.setRsInfo(rsInfo);
        Service service1 = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        Cluster x95 = new Cluster();
        x95.setDefCkport(1);
        x95.setDefIPPort(1);
        x95.setService(new Service());
        x95.setServiceName("John Smith");
        x95.setSitegroup("DE");
        x95.setDefaultCheckPort(1);
        x95.setDefaultPort(1);
        AbstractHealthChecker healthChecker1 =
             mock(AbstractHealthChecker.class);
        x95.setHealthChecker(healthChecker1);
        x95.setMetadata(new HashMap<String, String>());
        x95.setName("John Smith");
        x95.setUseIPPort4Check(false);
        clusterMap.put("HmacMD5", x95);
        service1.setClusterMap(clusterMap);
        service1.setEnabled(false);
        service1.setIpDeleteTimeout(1L);
        service1.setLastModifiedMillis(1L);
        service1.setNamespaceId("1234");
        ArrayList<String> owners = new ArrayList<String>();
        owners.add("foo");
        service1.setOwners(owners);
        service1.setResetWeight(false);
        Selector selector = mock(Selector.class);
        service1.setSelector(selector);
        service1.setToken("Bearer");
        service1.setAppName("Acme");
        service1.setGroupName("Acme");
        HashMap<String, String> metadata4 = new HashMap<String, String>();
        metadata4.put("foo", "foo");
        service1.setMetadata(metadata4);
        service1.setName("Acme");
        service1.setProtectThreshold(1.0f);
        clientBeatProcessor.setService(service1);
        assertThat(clientBeatProcessor.getRsInfo(), sameInstance(rsInfo));
        assertThat(clientBeatProcessor.getService(), sameInstance(service1));
    }
}
