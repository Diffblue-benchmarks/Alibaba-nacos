package com.alibaba.nacos.naming.healthcheck;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.pojo.AbstractHealthChecker;
import com.alibaba.nacos.naming.core.Cluster;
import com.alibaba.nacos.naming.core.Service;
import com.alibaba.nacos.naming.selector.LabelSelector;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.healthcheck.ClientBeatProcessor
 *
 * @author Diffblue Cover
 */

public class ClientBeatProcessorTest {

    @Test
    public void factory() throws CloneNotSupportedException {
        ClientBeatProcessor clientBeatProcessor = new ClientBeatProcessor();
        RsInfo rsInfo = new RsInfo();
        rsInfo.setAk("foo");
        rsInfo.setCluster("John Smith");
        rsInfo.setCpu(1.0);
        rsInfo.setEphemeral(false);
        rsInfo.setIp("foo");
        rsInfo.setLoad(1.0);
        rsInfo.setMem(1.0);
        HashMap<String, String> metadata1 = new HashMap<String, String>();
        metadata1.put("foo", "foo");
        rsInfo.setMetadata(metadata1);
        rsInfo.setPort(1);
        rsInfo.setQps(1.0);
        rsInfo.setRt(1.0);
        rsInfo.setServiceName("Acme");
        rsInfo.setWeight(1.0);
        clientBeatProcessor.setRsInfo(rsInfo);
        Service service = new Service();
        HashMap<String, Cluster> clusterMap = new HashMap<String, Cluster>();
        Cluster x24 = new Cluster();
        x24.setDefCkport(1);
        x24.setDefIPPort(1);
        x24.setServiceName("John Smith");
        x24.setSitegroup("DE");
        x24.setDefaultCheckPort(1);
        x24.setDefaultPort(1);
        AbstractHealthChecker healthChecker1 =
             mock(AbstractHealthChecker.class);
        x24.setHealthChecker(healthChecker1);
        x24.setName("John Smith");
        x24.setUseIPPort4Check(false);
        clusterMap.put("foo", x24);
        service.setClusterMap(clusterMap);
        service.setEnabled(false);
        service.setIpDeleteTimeout(1L);
        service.setLastModifiedMillis(1L);
        service.setNamespaceId("1234");
        service.setOwners(new ArrayList<String>());
        service.setResetWeight(false);
        service.setSelector(new LabelSelector());
        service.setToken("Bearer");
        service.setAppName("Acme");
        service.setGroupName("Acme");
        HashMap<String, String> metadata2 = new HashMap<String, String>();
        metadata2.put("foo", "foo");
        service.setMetadata(metadata2);
        service.setName("Acme");
        service.setProtectThreshold(1.0f);
        clientBeatProcessor.setService(service);
        assertThat(clientBeatProcessor.getRsInfo(), sameInstance(rsInfo));
        assertThat(clientBeatProcessor.getService(), sameInstance(service));
    }
}
