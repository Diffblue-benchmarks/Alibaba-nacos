package com.alibaba.nacos.naming.healthcheck;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.naming.core.Cluster;
import com.alibaba.nacos.naming.core.Service;
import com.alibaba.nacos.naming.selector.Selector;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.healthcheck.ClientBeatProcessor
 *
 * @author Diffblue Cover
 */

public class ClientBeatProcessorTest {

    @Test
    public void factory() {
        ClientBeatProcessor clientBeatProcessor = new ClientBeatProcessor();
        RsInfo rsInfo = new RsInfo();
        rsInfo.setAk("foo");
        rsInfo.setCluster("John Smith");
        rsInfo.setCpu(1.0);
        rsInfo.setEphemeral(false);
        rsInfo.setIp("foo");
        rsInfo.setLoad(1.0);
        rsInfo.setMem(1.0);
        rsInfo.setMetadata(new HashMap<String, String>());
        rsInfo.setPort(1);
        rsInfo.setQps(1.0);
        rsInfo.setRt(1.0);
        rsInfo.setServiceName("Acme");
        rsInfo.setWeight(1.0);
        clientBeatProcessor.setRsInfo(rsInfo);
        Service service = new Service();
        service.setClusterMap(new HashMap<String, Cluster>());
        service.setEnabled(false);
        service.setIpDeleteTimeout(1L);
        service.setLastModifiedMillis(1L);
        service.setNamespaceId("1234");
        ArrayList<String> owners = new ArrayList<String>();
        owners.add("foo");
        service.setOwners(owners);
        service.setResetWeight(false);
        Selector selector = mock(Selector.class);
        service.setSelector(selector);
        service.setToken("Bearer");
        service.setAppName("Acme");
        service.setGroupName("Acme");
        service.setMetadata(new HashMap<String, String>());
        service.setName("Acme");
        service.setProtectThreshold(1.0f);
        clientBeatProcessor.setService(service);
        assertThat(clientBeatProcessor.getRsInfo(), sameInstance(rsInfo));
        assertThat(clientBeatProcessor.getService(), sameInstance(service));
    }

    @Test
    public void run() {
        ClientBeatProcessor clientBeatProcessor = new ClientBeatProcessor();
        RsInfo rsInfo = new RsInfo();
        rsInfo.setCluster("John Smith");
        clientBeatProcessor.setRsInfo(rsInfo);
        Service service1 = new Service();
        HashMap<String, Cluster> clusterMap1 = new HashMap<String, Cluster>();
        clusterMap1.put("John Smith", new Cluster());
        service1.setClusterMap(clusterMap1);
        clientBeatProcessor.setService(service1);
        clientBeatProcessor.run();
    }
}
