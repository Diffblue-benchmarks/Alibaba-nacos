package com.alibaba.nacos.naming.misc;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.misc.HttpClient
 *
 * @author Diffblue JCover
 */

public class HttpClientTest {

    @Test(timeout=10000)
    public void encodingParamsEncodingIsNameAndParamsIsEmptyReturnsNull() throws java.io.UnsupportedEncodingException {
        assertThat(HttpClient.encodingParams(new HashMap<String, String>(), "name"), is(nullValue()));
    }

    @Test(timeout=10000)
    public void httpDelete() {
        // pojo HttpClient.HttpResult
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpDeleteParamValuesIsEmpty() {
        Map<String, String> paramValues = new HashMap<String, String>();
        ((HashMap<String, String>)paramValues).put("foo", "");
        // pojo HttpClient.HttpResult
        assertThat(paramValues.get("encoding"), is("UTF-8"));
        assertThat(paramValues.get("nofix"), is("1"));
    }

    @Test(timeout=10000)
    public void httpDeleteParamValuesIsFoo() {
        Map<String, String> paramValues = new HashMap<String, String>();
        ((HashMap<String, String>)paramValues).put("1", "foo");
        // pojo HttpClient.HttpResult
        assertThat(paramValues.get("encoding"), is("UTF-8"));
        assertThat(paramValues.get("nofix"), is("1"));
    }

    @Test(timeout=10000)
    public void httpGetHeadersIsEmptyAndParamValuesIsEmptyAndUrlIsFoo() {
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpGetLargeHeadersIsEmptyAndUrlIsBar() {
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpGetLargeHeadersIsFooAndUrlIsFoo() {
        Map<String, String> headers = new HashMap<String, String>();
        ((HashMap<String, String>)headers).put("foo", "foo");
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpPostLargeHeadersIsEmptyAndUrlIsBar() {
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpPostLargeHeadersIsFoo() {
        Map<String, String> headers = new HashMap<String, String>();
        ((HashMap<String, String>)headers).put("foo", "foo");
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpPostParamValuesIsEmpty() {
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpPostParamValuesIsFoo() {
        Map<String, String> paramValues = new HashMap<String, String>();
        ((HashMap<String, String>)paramValues).put("foo", "foo");
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpPutLargeHeadersIsEmpty() {
        byte[] content = new byte[] { 1 };
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void httpPutLargeHeadersIsFoo() {
        Map<String, String> headers = new HashMap<String, String>();
        ((HashMap<String, String>)headers).put("foo", "foo");
        byte[] content = new byte[] { 1 };
        // pojo HttpClient.HttpResult
    }

    @Test(timeout=10000)
    public void translateParameterMapParameterMapIsEmptyReturnsEmpty() {
        assertThat(HttpClient.translateParameterMap(new HashMap<String, String[]>()).isEmpty(), is(true));
    }

    @Test(timeout=10000)
    public void translateParameterMapParameterMapIsFooReturnsFoo() {
        Map<String, String[]> parameterMap = new HashMap<String, String[]>();
        String[] x158 = new String[] { "foo" };
        ((HashMap<String, String[]>)parameterMap).put("foo", x158);
        assertThat(HttpClient.translateParameterMap(parameterMap).get("foo"), is("foo"));
    }
}
