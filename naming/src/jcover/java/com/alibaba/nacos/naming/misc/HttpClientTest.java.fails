package com.alibaba.nacos.naming.misc;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.naming.misc.HttpClient
 *
 * @author Diffblue Cover
 */

public class HttpClientTest {

    @Test
    public void httpDeleteParamValuesIsEmpty() {
        HashMap<String, String> paramValues = new HashMap<String, String>();
        paramValues.put("foo", "");
        // pojo HttpClient.HttpResult
        assertThat(paramValues.get("encoding"), is("UTF-8"));
        assertThat(paramValues.get("nofix"), is("1"));
    }

    @Test
    public void httpDeleteParamValuesIsFoo() {
        HashMap<String, String> paramValues = new HashMap<String, String>();
        paramValues.put("foo", "foo");
        // pojo HttpClient.HttpResult
        assertThat(paramValues.get("encoding"), is("UTF-8"));
        assertThat(paramValues.get("nofix"), is("1"));
    }

    @Test
    public void httpDeleteParamValuesIsNull() {
        // pojo HttpClient.HttpResult
    }

    @Test
    public void httpGetHeadersIsEmptyAndParamValuesIsFoo() {
        HashMap<String, String> paramValues = new HashMap<String, String>();
        paramValues.put("foo", "foo");
        // pojo HttpClient.HttpResult
        assertThat(paramValues.get("encoding"), is("UTF-8"));
        assertThat(paramValues.get("nofix"), is("1"));
    }

    @Test
    public void httpPostHeadersIsEmptyAndParamValuesIsFoo() {
        HashMap<String, String> paramValues = new HashMap<String, String>();
        paramValues.put("foo", "foo");
        // pojo HttpClient.HttpResult
    }

    @Test
    public void httpPutLargeContentIsOneAndHeadersIsFoo() {
        HashMap<String, String> headers = new HashMap<String, String>();
        headers.put("foo", "foo");
        byte[] content = new byte[] { 1 };
        // pojo HttpClient.HttpResult
    }

    @Test
    public void httpGetLargeHeadersIsFoo() {
        HashMap<String, String> headers = new HashMap<String, String>();
        headers.put("foo", "foo");
        // pojo HttpClient.HttpResult
    }

    @Test
    public void httpPostLargeHeadersIsFoo() {
        HashMap<String, String> headers = new HashMap<String, String>();
        headers.put("foo", "foo");
        // pojo HttpClient.HttpResult
    }

    @Test
    public void encodingParamsParamsIsNullReturnsNull() throws java.io.UnsupportedEncodingException {
        assertThat(HttpClient.encodingParams(null, "/some/path.html"), is(nullValue()));
    }

    @Test
    public void translateParameterMapParameterMapIsFooReturnsFoo() {
        HashMap<String, String[]> parameterMap =
             new HashMap<String, String[]>();
        String[] x177 = new String[] { "foo" };
        parameterMap.put("foo", x177);
        assertThat(HttpClient.translateParameterMap(parameterMap).get("foo"), is("foo"));
    }
}
