package com.alibaba.nacos.config.server.service;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.config.server.model.SampleResult;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for com.alibaba.nacos.config.server.service.ConfigSubService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ConfigSubService.class})
@ExtendWith(SpringExtension.class)
class ConfigSubServiceTest {

    @MockBean(name = "serverListService")
    private ServerListService serverListService;

    @Autowired
    private ConfigSubService service;

    @Test
    void mergeSampleResult() {
        SampleResult sampleCollectResult = new SampleResult();
        sampleCollectResult.setLisentersGroupkeyStatus(new HashMap<String, String>());
        ArrayList<SampleResult> sampleResults = new ArrayList<SampleResult>();
        SampleResult sampleResult = new SampleResult();
        sampleResult.setLisentersGroupkeyStatus(new HashMap<String, String>());
        sampleResults.add(sampleResult);
        assertThat(service.mergeSampleResult(sampleCollectResult, sampleResults).getLisentersGroupkeyStatus().isEmpty(), is(true));
    }

    @Test
    void mergeSampleResultSampleResultsIsEmpty() {
        SampleResult sampleCollectResult = new SampleResult();
        HashMap<String, String> lisentersGroupkeyStatus =
             new HashMap<String, String>();
        lisentersGroupkeyStatus.put("", "foo");
        sampleCollectResult.setLisentersGroupkeyStatus(lisentersGroupkeyStatus);
        assertThat(service.mergeSampleResult(sampleCollectResult, new ArrayList<SampleResult>()).getLisentersGroupkeyStatus(), is(notNullValue()));
    }

    @Test
    void getCollectSampleResult() throws Exception {
        List<String> list2 = new ArrayList<String>();
        list2.add("bar");
        when(serverListService.getServerList())
            .thenReturn(list2)
            .thenReturn(new ArrayList<String>());
        assertThat(service.getCollectSampleResult("1234", "/some/path.html", "/some/path.html", 1).getLisentersGroupkeyStatus().isEmpty(), is(true));
    }

    @Test
    void getCollectSampleResultTenantIsEmpty() throws Exception {
        List<String> list2 = new ArrayList<String>();
        list2.add("/some/path.html");
        when(serverListService.getServerList())
            .thenReturn(list2)
            .thenReturn(new ArrayList<String>());
        assertThat(service.getCollectSampleResult("1234", "/some/path.html", "", 1).getLisentersGroupkeyStatus().isEmpty(), is(true));
    }

    @Test
    void getCollectSampleResultByIp1() throws Exception {
        List<String> list2 = new ArrayList<String>();
        list2.add("bar");
        when(serverListService.getServerList())
            .thenReturn(list2)
            .thenReturn(new ArrayList<String>());
        assertThat(service.getCollectSampleResultByIp("/some/path.html", 1).getLisentersGroupkeyStatus().isEmpty(), is(true));
    }

    @Test
    void getCollectSampleResultByIp2() throws Exception {
        List<String> list1 = new ArrayList<String>();
        list1.add("");
        List<String> list2 = new ArrayList<String>();
        list2.add("bar");
        when(serverListService.getServerList())
            .thenReturn(list2)
            .thenReturn(list1);
        assertThat(service.getCollectSampleResultByIp("/some/path.html", 1).getLisentersGroupkeyStatus().isEmpty(), is(true));
    }
}
