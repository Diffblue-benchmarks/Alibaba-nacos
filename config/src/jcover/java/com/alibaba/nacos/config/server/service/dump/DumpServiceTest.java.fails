package com.alibaba.nacos.config.server.service.dump;

import static org.mockito.Mockito.when;

import com.alibaba.nacos.config.server.service.PersistService;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.core.env.Environment;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for com.alibaba.nacos.config.server.service.dump.DumpService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {DumpService.class})
@ExtendWith(SpringExtension.class)
class DumpServiceTest {

    @MockBean(name = "env")
    private Environment env;

    @MockBean(name = "persistService")
    private PersistService persistService;

    @Autowired
    private DumpService service;

    @Test
    void dump1() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException, IllegalStateException, IllegalArgumentException {
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");
        service.dump("1234", "/some/path.html", "/some/path.html", 1L, "/some/path.html");
    }

    @Test
    void dump2() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException, IllegalStateException, IllegalArgumentException {
        service.dump("1234", "DumpService start", "/some/path.html", 1L, "/some/path.html");
    }

    @Test
    void dumpAll() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException, IllegalStateException, IllegalArgumentException {
        service.dumpAll();
    }

    @Test
    void dumpTagIsTag() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException, IllegalStateException, IllegalArgumentException {
        service.dump("1234", "DumpService start", "/some/path.html", "tag", 1L, "/some/path.html");
    }
}
