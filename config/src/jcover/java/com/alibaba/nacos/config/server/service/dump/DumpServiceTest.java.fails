package com.alibaba.nacos.config.server.service.dump;

import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.anyLong;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.config.server.model.ConfigInfoAggr;
import com.alibaba.nacos.config.server.model.ConfigInfoChanged;
import com.alibaba.nacos.config.server.model.Page;
import com.alibaba.nacos.config.server.service.PersistService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.core.env.Environment;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for com.alibaba.nacos.config.server.service.dump.DumpService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {DumpService.class})
@ExtendWith(SpringExtension.class)
class DumpServiceTest {

    @MockBean(name = "env")
    private Environment env;

    @MockBean(name = "persistService")
    private PersistService persistService;

    @Autowired
    private DumpService service;

    @Test
    void dump2() {

        // arrange
        List<ConfigInfoChanged> list = new ArrayList<ConfigInfoChanged>();
        ConfigInfoChanged configInfoChanged = new ConfigInfoChanged();
        configInfoChanged.setDataId("1234");
        configInfoChanged.setGroup("/some/path.html");
        configInfoChanged.setTenant("/some/path.html");
        list.add(configInfoChanged);
        Page<PersistService.ConfigInfoWrapper> page2 =
             new Page<PersistService.ConfigInfoWrapper>();
        ArrayList<PersistService.ConfigInfoWrapper> pageItems2 =
             new ArrayList<PersistService.ConfigInfoWrapper>();
        PersistService.ConfigInfoWrapper configInfoWrapper =
             new PersistService.ConfigInfoWrapper();
        configInfoWrapper.setContent("hello");
        configInfoWrapper.setDataId("1234");
        configInfoWrapper.setGroup("/some/path.html");
        configInfoWrapper.setId(1L);
        pageItems2.add(configInfoWrapper);
        page2.setPageItems(pageItems2);
        when(persistService.aggrConfigInfoCount(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any()))
            .thenReturn(1);
        when(persistService.findAllAggrGroup())
            .thenReturn(list);
        when(persistService.findAllConfigInfoFragment(anyLong(), anyInt()))
            .thenReturn(page2);
        when(persistService.findConfigInfoAggrByPage(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any(), anyInt(), anyInt()))
            .thenReturn(new Page<ConfigInfoAggr>());
        when(persistService.findConfigMaxId())
            .thenReturn(1L);
        when(persistService.isExistTable(Mockito.<String>any()))
            .thenReturn(false)
            .thenReturn(false);
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");

        // act
        service.dump("1234", "/some/path.html", "/some/path.html", "tag", 1L, "/some/path.html");

        // assert
        Mockito.verify(persistService).removeConfigInfo(ArgumentMatchers.eq("1234"), ArgumentMatchers.eq("/some/path.html"), ArgumentMatchers.eq("/some/path.html"), ArgumentMatchers.eq("10.1.0.4"), ArgumentMatchers.eq((String) null));
    }

    @Test
    void dump1() {

        // arrange
        List<ConfigInfoChanged> list = new ArrayList<ConfigInfoChanged>();
        ConfigInfoChanged configInfoChanged = new ConfigInfoChanged();
        configInfoChanged.setDataId("1234");
        configInfoChanged.setGroup("/some/path.html");
        configInfoChanged.setTenant("/some/path.html");
        list.add(configInfoChanged);
        Page<PersistService.ConfigInfoWrapper> page2 =
             new Page<PersistService.ConfigInfoWrapper>();
        ArrayList<PersistService.ConfigInfoWrapper> pageItems2 =
             new ArrayList<PersistService.ConfigInfoWrapper>();
        PersistService.ConfigInfoWrapper configInfoWrapper =
             new PersistService.ConfigInfoWrapper();
        configInfoWrapper.setContent("hello");
        configInfoWrapper.setDataId("1234");
        configInfoWrapper.setGroup("/some/path.html");
        configInfoWrapper.setId(1L);
        pageItems2.add(configInfoWrapper);
        page2.setPageItems(pageItems2);
        when(persistService.aggrConfigInfoCount(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any()))
            .thenReturn(1);
        when(persistService.findAllAggrGroup())
            .thenReturn(list);
        when(persistService.findAllConfigInfoFragment(anyLong(), anyInt()))
            .thenReturn(page2);
        when(persistService.findConfigInfoAggrByPage(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any(), anyInt(), anyInt()))
            .thenReturn(new Page<ConfigInfoAggr>());
        when(persistService.findConfigMaxId())
            .thenReturn(1L);
        when(persistService.isExistTable(Mockito.<String>any()))
            .thenReturn(false)
            .thenReturn(false);
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");

        // act
        service.dump("1234", "/some/path.html", "/some/path.html", 1L, "/some/path.html");

        // assert
        Mockito.verify(persistService).removeConfigInfo(ArgumentMatchers.eq("1234"), ArgumentMatchers.eq("/some/path.html"), ArgumentMatchers.eq("/some/path.html"), ArgumentMatchers.eq("10.1.0.4"), ArgumentMatchers.eq((String) null));
    }

    @Test
    void dumpAll1() {
        service.dumpAll();
    }

    @Test
    void dumpAll2() {

        // arrange
        List<ConfigInfoChanged> list = new ArrayList<ConfigInfoChanged>();
        ConfigInfoChanged configInfoChanged = new ConfigInfoChanged();
        configInfoChanged.setDataId("1234");
        configInfoChanged.setGroup("/some/path.html");
        configInfoChanged.setTenant("/some/path.html");
        list.add(configInfoChanged);
        Page<PersistService.ConfigInfoWrapper> page2 =
             new Page<PersistService.ConfigInfoWrapper>();
        ArrayList<PersistService.ConfigInfoWrapper> pageItems2 =
             new ArrayList<PersistService.ConfigInfoWrapper>();
        PersistService.ConfigInfoWrapper configInfoWrapper =
             new PersistService.ConfigInfoWrapper();
        configInfoWrapper.setContent("hello");
        configInfoWrapper.setDataId("1234");
        configInfoWrapper.setGroup("/some/path.html");
        configInfoWrapper.setId(1L);
        pageItems2.add(configInfoWrapper);
        page2.setPageItems(pageItems2);
        when(persistService.aggrConfigInfoCount(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any()))
            .thenReturn(1);
        when(persistService.findAllAggrGroup())
            .thenReturn(list);
        when(persistService.findAllConfigInfoFragment(anyLong(), anyInt()))
            .thenReturn(page2);
        when(persistService.findConfigInfoAggrByPage(Mockito.<String>any(), Mockito.<String>any(), Mockito.<String>any(), anyInt(), anyInt()))
            .thenReturn(new Page<ConfigInfoAggr>());
        when(persistService.findConfigMaxId())
            .thenReturn(1L);
        when(persistService.isExistTable(Mockito.<String>any()))
            .thenReturn(false)
            .thenReturn(false);
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");

        // act
        service.dumpAll();

        // assert
        Mockito.verify(persistService).removeConfigInfo(ArgumentMatchers.eq("1234"), ArgumentMatchers.eq("/some/path.html"), ArgumentMatchers.eq("/some/path.html"), ArgumentMatchers.eq("10.1.0.4"), ArgumentMatchers.eq((String) null));
    }
}
