package com.alibaba.nacos.config.server.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.alibaba.nacos.config.server.service.capacity.CapacityService;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * Unit tests for com.alibaba.nacos.config.server.controller.CapacityController
 *
 * @author Diffblue JCover
 */

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = CapacityController.class)
public class CapacityControllerTest {

    @MockBean(name = "")
    private CapacityService ;

    @Autowired
    private CapacityController controller;

    @Test(timeout=10000)
    public void getCapacity() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/cs/capacity/", new Object[] { }))
            .andExpect(status().is(400))
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"code\":400,\"message\":\"参数group和tenant不能同时为空\",\"data\":null}"));
    }

    @Test(timeout=10000)
    public void updateCapacity() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/v1/cs/capacity/", new Object[] { }))
            .andExpect(status().is(400))
            .andExpect(content().contentType("application/json;charset=UTF-8"))
            .andExpect(content().string("{\"code\":400,\"message\":\"参数group和tenant不能同时为空\",\"data\":false}"));
    }
}
