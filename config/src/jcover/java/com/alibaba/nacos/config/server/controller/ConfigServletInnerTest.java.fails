package com.alibaba.nacos.config.server.controller;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.alibaba.nacos.config.server.service.LongPollingService;
import com.alibaba.nacos.config.server.service.PersistService;

import java.util.HashMap;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for com.alibaba.nacos.config.server.controller.ConfigServletInner
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {ConfigServletInner.class})
@ExtendWith(SpringExtension.class)
class ConfigServletInnerTest {

    @MockBean(name = "longPollingService")
    private LongPollingService longPollingService;

    @MockBean(name = "persistService")
    private PersistService persistService;

    @Autowired
    private ConfigServletInner service;

    @Test
    void doPollingConfigClientMd5MapIsEmptyAndProbeRequestSizeIsOne() throws java.io.UnsupportedEncodingException, java.io.IOException, javax.servlet.ServletException {
        MockHttpServletResponse response = new MockHttpServletResponse();
        assertThat(service.doPollingConfig(new MockHttpServletRequest(), response, new HashMap<String, String>(), 1), is("200"));
        assertThat(response.getHeaderNames(), hasSize(5));
        assertTrue(response.getHeaderNames().contains("Cache-Control"));
        assertTrue(response.getHeaderNames().contains("Expires"));
        assertTrue(response.getHeaderNames().contains("Pragma"));
        assertTrue(response.getHeaderNames().contains("Probe-Modify-Response"));
        assertTrue(response.getHeaderNames().contains("Probe-Modify-Response-New"));
    }

    @Test
    void doGetConfigTagIsTag() throws java.io.UnsupportedEncodingException, java.io.IOException, javax.servlet.ServletException {
        MockHttpServletResponse response = new MockHttpServletResponse();
        assertThat(service.doGetConfig(new MockHttpServletRequest(), response, "1234", "/some/path.html", "/some/path.html", "tag", "/some/path.html"), is("404"));
        assertThat(response.getContentAsString(), is("config data not exist\n"));
        assertThat(response.getStatus(), is(404));
    }
}
