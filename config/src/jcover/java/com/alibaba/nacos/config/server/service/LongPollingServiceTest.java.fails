package com.alibaba.nacos.config.server.service;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.alibaba.nacos.config.server.model.SampleResult;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for com.alibaba.nacos.config.server.service.LongPollingService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {LongPollingService.class})
@ExtendWith(SpringExtension.class)
class LongPollingServiceTest {

    @Autowired
    private LongPollingService service;

    @Test
    void isClientLongPollingReturnsFalse() {
        assertThat(service.isClientLongPolling("/some/path.html"), is(false));
    }

    @Test
    void getters() {
        assertThat(service.getClientSubConfigInfo("/some/path.html").isEmpty(), is(true));
        assertThat(service.getCollectSubscribleInfo("1234", "/some/path.html", "/some/path.html").getLisentersGroupkeyStatus().isEmpty(), is(true));
        assertThat(service.getCollectSubscribleInfoByIp("/some/path.html").getLisentersGroupkeyStatus().isEmpty(), is(true));
        assertThat(service.getRetainIps().isEmpty(), is(true));
    }

    @Test
    void mergeSampleResult() {
        ArrayList<SampleResult> sampleResults = new ArrayList<SampleResult>();
        SampleResult sampleResult = new SampleResult();
        HashMap<String, String> lisentersGroupkeyStatus =
             new HashMap<String, String>();
        lisentersGroupkeyStatus.put("foo", "foo");
        sampleResult.setLisentersGroupkeyStatus(lisentersGroupkeyStatus);
        sampleResults.add(sampleResult);
        assertThat(service.mergeSampleResult(sampleResults).getLisentersGroupkeyStatus().get("foo"), is("foo"));
    }

    @Test
    void collectApplicationSubscribeConfigInfosReturnsNull() {
        assertThat(service.collectApplicationSubscribeConfigInfos(), is(nullValue()));
    }

    @Test
    void interestReturnsLocalDataChangeEvent() {
        List<Class<? extends com.alibaba.nacos.config.server.utils.event.EventDispatcher.Event>> result =
             service.interest();
        assertThat(result.size(), is(1));
        assertThat((Class<LocalDataChangeEvent>) result.get(0), equalTo((Class) LocalDataChangeEvent.class));
    }

    @Test
    void onEvent() {
        service.onEvent(new ConfigDataChangeEvent("something", "something", 1L));
    }

    @Test
    void generateResponse() throws java.io.UnsupportedEncodingException {

        // arrange
        MockHttpServletResponse response = new MockHttpServletResponse();
        ArrayList<String> changedGroups = new ArrayList<String>();
        changedGroups.add("foo=bar");

        // act
        service.generateResponse(new MockHttpServletRequest(), response, changedGroups);

        // assert
        assertThat(response.getContentAsString(), is("null%02foo%3Dbar%01\n"));
        assertThat(response.getHeaderNames(), hasSize(3));
        assertTrue(response.getHeaderNames().contains("Cache-Control"));
        assertTrue(response.getHeaderNames().contains("Expires"));
        assertTrue(response.getHeaderNames().contains("Pragma"));
    }

    @Test
    void setRetainIpsToEmpty() {
        service.setRetainIps(new HashMap<String, Long>());
    }
}
