package com.alibaba.nacos.config.server.service;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import com.alibaba.nacos.config.server.model.SubscriberStatus;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.config.server.service.ClientTrackService
 *
 * @author Diffblue Cover
 */

class ClientTrackServiceTest {

    @Test
    void trackClientMd1() {
        ClientTrackService.trackClientMd5("RA123456789CN", new HashMap<String, String>());
    }

    @Test
    void trackClientMd2() {
        ClientTrackService.trackClientMd5("RA123456789CN", new HashMap<String, String>(), new HashMap<String, Long>());
    }

    @Test
    void trackClientMd5GroupKeyIsKeyAndIpIsBar() {
        ClientTrackService.trackClientMd5("bar", "key", "RA123456789CN");
    }

    @Test
    void subscribeClientCountReturnsZero() {
        assertThat(ClientTrackService.subscribeClientCount(), is(0));
    }

    @Test
    void subscriberCountReturnsSeven() {
        assertThat(ClientTrackService.subscriberCount(), is(7L));
    }

    @Test
    void listSubStatusIpIsBar() {
        Map<String, SubscriberStatus> result =
             ClientTrackService.listSubStatus("bar");
        assertThat(result.get("key").getGroupKey(), is("key"));
        assertThat(result.get("key").getLastTime(), is(1_603_775_418_783L));
        assertThat(result.get("key").getMd5(), is("RA123456789CN"));
        assertThat(result.get("key").getServerIp(), is(nullValue()));
        assertThat(result.get("key").getStatus(), is(false));
    }

    @Test
    void listSubStatusReturnsEmpty() {
        assertThat(ClientTrackService.listSubStatus("on time").isEmpty(), is(true));
    }

    @Test
    void listSubsByGroupGroupKeyIsKey() {
        Map<String, SubscriberStatus> result =
             ClientTrackService.listSubsByGroup("key");
        assertThat(result.get("").getGroupKey(), is("key"));
        assertThat(result.get("").getLastTime(), is(1_603_775_418_782L));
        assertThat(result.get("").getMd5(), is("RA123456789CN"));
        assertThat(result.get("").getServerIp(), is(nullValue()));
        assertThat(result.get("").getStatus(), is(false));
        assertThat(result.get("RA123456789CN").getGroupKey(), is("key"));
        assertThat(result.get("RA123456789CN").getLastTime(), is(1_603_775_418_790L));
        assertThat(result.get("RA123456789CN").getMd5(), is("foo"));
        assertThat(result.get("RA123456789CN").getServerIp(), is(nullValue()));
        assertThat(result.get("RA123456789CN").getStatus(), is(false));
        assertThat(result.get("bar").getGroupKey(), is("key"));
        assertThat(result.get("bar").getLastTime(), is(1_603_775_418_783L));
        assertThat(result.get("bar").getMd5(), is("RA123456789CN"));
        assertThat(result.get("bar").getServerIp(), is(nullValue()));
        assertThat(result.get("bar").getStatus(), is(false));
        assertThat(result.get("foo").getGroupKey(), is("key"));
        assertThat(result.get("foo").getLastTime(), is(1_603_775_418_784L));
        assertThat(result.get("foo").getMd5(), is("RA123456789CN"));
        assertThat(result.get("foo").getServerIp(), is(nullValue()));
        assertThat(result.get("foo").getStatus(), is(false));
    }

    @Test
    void isClientUptodateIpIsBarReturnsFalse() {
        assertThat(ClientTrackService.isClientUptodate("bar").get("key"), is(false));
    }

    @Test
    void listSubscriberByGroupGroupKeyIsKeyReturnsFalseFalseFalseFalse() {
        Map<String, Boolean> result =
             ClientTrackService.listSubscriberByGroup("key");
        assertThat(result.get(""), is(false));
        assertThat(result.get("RA123456789CN"), is(false));
        assertThat(result.get("bar"), is(false));
        assertThat(result.get("foo"), is(false));
    }

    @Test
    void refreshClientRecord() {
        ClientTrackService.refreshClientRecord();
    }
}
