package com.alibaba.nacos.config.server.service.capacity;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.when;

import com.alibaba.nacos.config.server.constant.CounterMode;
import com.alibaba.nacos.config.server.model.capacity.Capacity;
import com.alibaba.nacos.config.server.model.capacity.GroupCapacity;
import com.alibaba.nacos.config.server.model.capacity.TenantCapacity;
import com.alibaba.nacos.config.server.service.PersistService;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

/**
 * Unit tests for com.alibaba.nacos.config.server.service.capacity.CapacityService
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {CapacityService.class})
@ExtendWith(SpringExtension.class)
class CapacityServiceTest {

    @MockBean(name = "groupCapacityPersistService")
    private GroupCapacityPersistService groupCapacityPersistService;

    @MockBean(name = "persistService")
    private PersistService persistService;

    @MockBean(name = "tenantCapacityPersistService")
    private TenantCapacityPersistService tenantCapacityPersistService;

    @Autowired
    private CapacityService service;

    @Test
    void destroy() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        service.destroy();
    }

    @Test
    void correctGroupUsage() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(groupCapacityPersistService.correctUsage(Mockito.<String>any(), Mockito.<java.sql.Timestamp>any()))
            .thenReturn(false);
        service.correctGroupUsage("/some/path.html");
    }

    @Test
    void correctTenantUsage() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(tenantCapacityPersistService.correctUsage(Mockito.<String>any(), Mockito.<java.sql.Timestamp>any()))
            .thenReturn(false);
        service.correctTenantUsage("/some/path.html");
    }

    @Test
    void initAllCapacity1() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        List<String> list2 = new ArrayList<String>();
        list2.add("foo");
        when(persistService.getGroupIdList(anyInt(), anyInt()))
            .thenReturn(list2);
        when(persistService.getTenantIdList(anyInt(), anyInt()))
            .thenReturn(new ArrayList<String>());
        GroupCapacity groupCapacity = new GroupCapacity();
        groupCapacity.setUsage(1);
        when(groupCapacityPersistService.getGroupCapacity(Mockito.<String>any()))
            .thenReturn(groupCapacity);
        when(groupCapacityPersistService.insertGroupCapacity(Mockito.<GroupCapacity>any()))
            .thenReturn(false);
        service.initAllCapacity();
    }

    @Test
    void initAllCapacity2() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);
        when(tenantCapacityPersistService.insertTenantCapacity(Mockito.<TenantCapacity>any()))
            .thenReturn(false);
        List<String> list1 = new ArrayList<String>();
        list1.add("foo");
        when(persistService.getGroupIdList(anyInt(), anyInt()))
            .thenReturn(new ArrayList<String>());
        when(persistService.getTenantIdList(anyInt(), anyInt()))
            .thenReturn(list1);
        service.initAllCapacity();
    }

    @Test
    void updateClusterUsageCounterModeIsIncrementReturnsFalse() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(groupCapacityPersistService.incrementUsageWithDefaultQuotaLimit(Mockito.<GroupCapacity>any()))
            .thenReturn(false);
        when(groupCapacityPersistService.incrementUsageWithQuotaLimit(Mockito.<GroupCapacity>any()))
            .thenReturn(false);
        assertThat(service.updateClusterUsage(CounterMode.INCREMENT), is(false));
    }

    @Test
    void getGroupCapacity() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {

        // arrange
        GroupCapacity groupCapacity = new GroupCapacity();
        groupCapacity.setGroup("/some/path.html");
        groupCapacity.setId(1L);
        groupCapacity.setMaxAggrCount(1);
        groupCapacity.setMaxAggrSize(1);
        groupCapacity.setMaxSize(1);
        groupCapacity.setQuota(1);
        groupCapacity.setUsage(1);
        when(groupCapacityPersistService.getGroupCapacity(Mockito.<String>any()))
            .thenReturn(groupCapacity);

        // act
        GroupCapacity result = service.getGroupCapacity("/some/path.html");

        // assert
        assertThat(result.getGroup(), is("/some/path.html"));
        assertThat(result.getId(), is(1L));
        assertThat(result.getMaxAggrCount(), is(1));
        assertThat(result.getMaxAggrSize(), is(1));
        assertThat(result.getMaxSize(), is(1));
        assertThat(result.getQuota(), is(1));
        assertThat(result.getUsage(), is(1));
    }

    @Test
    void updateGroupUsageCounterModeIsIncrementReturnsFalse() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(groupCapacityPersistService.incrementUsageWithDefaultQuotaLimit(Mockito.<GroupCapacity>any()))
            .thenReturn(false);
        when(groupCapacityPersistService.incrementUsageWithQuotaLimit(Mockito.<GroupCapacity>any()))
            .thenReturn(false);
        assertThat(service.updateGroupUsage(CounterMode.INCREMENT, "/some/path.html"), is(false));
    }

    @Test
    void initGroupCapacityReturnsFalse() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        GroupCapacity groupCapacity = new GroupCapacity();
        groupCapacity.setUsage(1);
        when(groupCapacityPersistService.getGroupCapacity(Mockito.<String>any()))
            .thenReturn(groupCapacity);
        when(groupCapacityPersistService.insertGroupCapacity(Mockito.<GroupCapacity>any()))
            .thenReturn(false);
        assertThat(service.initGroupCapacity("/some/path.html"), is(false));
    }

    @Test
    void getCapacityWithDefault1() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {

        // arrange
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setId(1L);
        tenantCapacity.setMaxAggrCount(0);
        tenantCapacity.setMaxAggrSize(1);
        tenantCapacity.setMaxSize(1);
        tenantCapacity.setQuota(1);
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);

        // act
        Capacity result =
             service.getCapacityWithDefault("/some/path.html", "/some/path.html");

        // assert
        assertThat(result.getId(), is(1L));
        assertThat(result.getMaxAggrCount(), is(10_000));
        assertThat(result.getMaxAggrSize(), is(1));
        assertThat(result.getMaxSize(), is(1));
        assertThat(result.getQuota(), is(1));
        assertThat(result.getUsage(), is(1));
    }

    @Test
    void getCapacityWithDefault2() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {

        // arrange
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setId(1L);
        tenantCapacity.setMaxAggrCount(1);
        tenantCapacity.setMaxAggrSize(0);
        tenantCapacity.setMaxSize(1);
        tenantCapacity.setQuota(1);
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);

        // act
        Capacity result =
             service.getCapacityWithDefault("/some/path.html", "/some/path.html");

        // assert
        assertThat(result.getId(), is(1L));
        assertThat(result.getMaxAggrCount(), is(1));
        assertThat(result.getMaxAggrSize(), is(1_024));
        assertThat(result.getMaxSize(), is(1));
        assertThat(result.getQuota(), is(1));
        assertThat(result.getUsage(), is(1));
    }

    @Test
    void getCapacityWithDefault3() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {

        // arrange
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setId(1L);
        tenantCapacity.setMaxAggrCount(1);
        tenantCapacity.setMaxAggrSize(1);
        tenantCapacity.setMaxSize(0);
        tenantCapacity.setQuota(1);
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);

        // act
        Capacity result =
             service.getCapacityWithDefault("/some/path.html", "/some/path.html");

        // assert
        assertThat(result.getId(), is(1L));
        assertThat(result.getMaxAggrCount(), is(1));
        assertThat(result.getMaxAggrSize(), is(1));
        assertThat(result.getMaxSize(), is(102_400));
        assertThat(result.getQuota(), is(1));
        assertThat(result.getUsage(), is(1));
    }

    @Test
    void getCapacityWithDefault4() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {

        // arrange
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setId(1L);
        tenantCapacity.setMaxAggrCount(1);
        tenantCapacity.setMaxAggrSize(1);
        tenantCapacity.setMaxSize(1);
        tenantCapacity.setQuota(0);
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);

        // act
        Capacity result =
             service.getCapacityWithDefault("/some/path.html", "/some/path.html");

        // assert
        assertThat(result.getId(), is(1L));
        assertThat(result.getMaxAggrCount(), is(1));
        assertThat(result.getMaxAggrSize(), is(1));
        assertThat(result.getMaxSize(), is(1));
        assertThat(result.getQuota(), is(200));
        assertThat(result.getUsage(), is(1));
    }

    @Test
    void getCapacityWithDefaultGroupIsFoo() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {

        // arrange
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setId(1L);
        tenantCapacity.setMaxAggrCount(1);
        tenantCapacity.setMaxAggrSize(1);
        tenantCapacity.setMaxSize(1);
        tenantCapacity.setQuota(1);
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);

        // act
        Capacity result =
             service.getCapacityWithDefault("foo", "/some/path.html");

        // assert
        assertThat(result.getId(), is(1L));
        assertThat(result.getMaxAggrCount(), is(1));
        assertThat(result.getMaxAggrSize(), is(1));
        assertThat(result.getMaxSize(), is(1));
        assertThat(result.getQuota(), is(1));
        assertThat(result.getUsage(), is(1));
    }

    @Test
    void getCapacityWithDefaultTenantIsEmpty() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {

        // arrange
        GroupCapacity groupCapacity = new GroupCapacity();
        groupCapacity.setId(1L);
        groupCapacity.setMaxAggrCount(1);
        groupCapacity.setMaxAggrSize(1);
        groupCapacity.setMaxSize(1);
        groupCapacity.setQuota(1);
        groupCapacity.setUsage(1);
        when(groupCapacityPersistService.getGroupCapacity(Mockito.<String>any()))
            .thenReturn(groupCapacity);

        // act
        Capacity result =
             service.getCapacityWithDefault("/some/path.html", "");

        // assert
        assertThat(result.getId(), is(1L));
        assertThat(result.getMaxAggrCount(), is(1));
        assertThat(result.getMaxAggrSize(), is(1));
        assertThat(result.getMaxSize(), is(1));
        assertThat(result.getQuota(), is(1));
        assertThat(result.getUsage(), is(1));
    }

    @Test
    void initCapacityGroupIsFooReturnsFalse() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);
        when(tenantCapacityPersistService.insertTenantCapacity(Mockito.<TenantCapacity>any()))
            .thenReturn(false);
        assertThat(service.initCapacity("foo", "/some/path.html"), is(false));
    }

    @Test
    void initCapacityReturnsTrue() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);
        when(tenantCapacityPersistService.insertTenantCapacity(Mockito.<TenantCapacity>any()))
            .thenReturn(true);
        assertThat(service.initCapacity("/some/path.html", "/some/path.html"), is(true));
    }

    @Test
    void updateTenantUsageCounterModeIsIncrementReturnsFalse() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(tenantCapacityPersistService.incrementUsageWithDefaultQuotaLimit(Mockito.<TenantCapacity>any()))
            .thenReturn(false);
        when(tenantCapacityPersistService.incrementUsageWithQuotaLimit(Mockito.<TenantCapacity>any()))
            .thenReturn(false);
        assertThat(service.updateTenantUsage(CounterMode.INCREMENT, "/some/path.html"), is(false));
    }

    @Test
    void initTenantCapacity() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        TenantCapacity tenantCapacity = new TenantCapacity();
        tenantCapacity.setUsage(1);
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(tenantCapacity);
        when(tenantCapacityPersistService.insertTenantCapacity(Mockito.<TenantCapacity>any()))
            .thenReturn(false);
        assertThat(service.initTenantCapacity("/some/path.html"), is(false));
    }

    @Test
    void initTenantCapacityReturnsTrue() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(tenantCapacityPersistService.insertTenantCapacity(Mockito.<TenantCapacity>any()))
            .thenReturn(true);
        assertThat(service.initTenantCapacity("/some/path.html", 1, 1, 1, 1), is(true));
    }

    @Test
    void initTenantCapacityTenantIsBar() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(tenantCapacityPersistService.insertTenantCapacity(Mockito.<TenantCapacity>any()))
            .thenReturn(false);
        assertThat(service.initTenantCapacity("bar", 1, 1, 1, 1), is(false));
    }

    @Test
    void insertOrUpdateCapacityMaxAggrCountIsOneAndMaxAggrSizeIsOneAndMaxSizeIsOneAndQuotaIsOneReturnsFalse() throws com.alibaba.nacos.config.server.exception.NacosException, java.io.IOException {
        when(tenantCapacityPersistService.getTenantCapacity(Mockito.<String>any()))
            .thenReturn(new TenantCapacity());
        when(tenantCapacityPersistService.updateTenantCapacity(Mockito.<String>any(), Mockito.<Integer>any(), Mockito.<Integer>any(), Mockito.<Integer>any(), Mockito.<Integer>any()))
            .thenReturn(false);
        assertThat(service.insertOrUpdateCapacity("/some/path.html", "/some/path.html", 1, 1, 1, 1), is(false));
    }
}
