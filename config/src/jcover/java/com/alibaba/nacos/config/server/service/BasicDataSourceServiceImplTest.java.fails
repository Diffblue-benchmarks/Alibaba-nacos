package com.alibaba.nacos.config.server.service;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.transaction.support.TransactionTemplate;

/**
 * Unit tests for com.alibaba.nacos.config.server.service.BasicDataSourceServiceImpl
 *
 * @author Diffblue Cover
 */

@ContextConfiguration(classes = {BasicDataSourceServiceImpl.class})
@ExtendWith(SpringExtension.class)
class BasicDataSourceServiceImplTest {

    @MockBean(name = "env")
    private Environment env;

    @Autowired
    private BasicDataSourceServiceImpl service;

    @Test
    void getCurrentDBUrlReturnsEmpty() throws IllegalStateException, IllegalArgumentException {
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");
        assertThat(service.getCurrentDBUrl(), is(""));
    }

    @Test
    void getHealthReturnsUP() throws IllegalStateException, IllegalArgumentException {
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");
        assertThat(service.getHealth(), is("UP"));
    }

    @Test
    void getJdbcTemplate() throws IllegalStateException, IllegalArgumentException {
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");
        JdbcTemplate result = service.getJdbcTemplate();
        assertThat(result.getFetchSize(), is(-1));
        assertThat(result.getMaxRows(), is(50_000));
        assertThat(result.getQueryTimeout(), is(3));
        assertThat(result.isIgnoreWarnings(), is(true));
        assertThat(result.isResultsMapCaseInsensitive(), is(false));
        assertThat(result.isSkipResultsProcessing(), is(false));
        assertThat(result.isSkipUndeclaredResults(), is(false));
        assertThat(result.getDataSource(), is(nullValue()));
        assertThat(result.isLazyInit(), is(true));
    }

    @Test
    void getTransactionTemplate() throws IllegalStateException, IllegalArgumentException {
        when(env.getProperty(Mockito.<String>any()))
            .thenReturn("foo");
        TransactionTemplate result = service.getTransactionTemplate();
        assertThat(result.getIsolationLevel(), is(-1));
        assertThat(result.getName(), is(nullValue()));
        assertThat(result.getPropagationBehavior(), is(0));
        assertThat(result.getTimeout(), is(5));
        assertThat(result.isReadOnly(), is(false));
    }
}
