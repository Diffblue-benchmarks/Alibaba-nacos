package com.alibaba.nacos.console.controller;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import com.alibaba.nacos.config.server.service.PersistService;
import com.alibaba.nacos.naming.controllers.OperatorController;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * Unit tests for com.alibaba.nacos.console.controller.HealthController
 *
 * @author Diffblue JCover
 */

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = HealthController.class)
public class HealthControllerTest {

    @MockBean(name = "")
    private PersistService ;

    @MockBean(name = "")
    private OperatorController ;

    @Autowired
    private HealthController controller;

    @Test(timeout=10000)
    public void liveness() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/console/health/liveness", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("text/plain;charset=ISO-8859-1"))
            .andExpect(content().string("OK"));
    }

    @Test(timeout=10000)
    public void readiness() throws Exception {
        when(x1.configInfoCount(Mockito.<String>any()))
            .thenReturn(1);
        when(x2.metrics(Mockito.<javax.servlet.http.HttpServletRequest>any()))
            .thenReturn(new com.alibaba.fastjson.JSONObject());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/v1/console/health/readiness", new Object[] { }))
            .andExpect(status().isOk())
            .andExpect(content().contentType("text/plain;charset=ISO-8859-1"))
            .andExpect(content().string("OK"));
    }
}
