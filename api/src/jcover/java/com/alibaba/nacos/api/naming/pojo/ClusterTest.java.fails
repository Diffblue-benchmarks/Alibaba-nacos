package com.alibaba.nacos.api.naming.pojo;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;

import java.util.HashMap;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.api.naming.pojo.Cluster
 *
 * @author Diffblue Cover
 */

class ClusterTest {

    @Test
    void factory1() {
        Cluster cluster = new Cluster("John Smith");
        cluster.setDefaultCheckPort(0);
        cluster.setDefaultPort(1);
        AbstractHealthChecker healthChecker =
             mock(AbstractHealthChecker.class);
        cluster.setHealthChecker(healthChecker);
        cluster.setMetadata(new HashMap<String, String>());
        cluster.setName("John Smith");
        cluster.setServiceName("John Smith");
        cluster.setUseIPPort4Check(false);
        assertThat(cluster.getDefaultCheckPort(), is(0));
        assertThat(cluster.getDefaultPort(), is(1));
        assertThat(cluster.getHealthChecker(), sameInstance(healthChecker));
        assertThat(cluster.getMetadata(), is(notNullValue()));
        assertThat(cluster.getName(), is("John Smith"));
        assertThat(cluster.getServiceName(), is("John Smith"));
        assertThat(cluster.isUseIPPort4Check(), is(false));
    }

    @Test
    void factory2() {
        Cluster cluster = new Cluster();
        cluster.setDefaultCheckPort(0);
        cluster.setDefaultPort(1);
        AbstractHealthChecker healthChecker =
             mock(AbstractHealthChecker.class);
        cluster.setHealthChecker(healthChecker);
        cluster.setMetadata(new HashMap<String, String>());
        cluster.setName("bar");
        cluster.setServiceName("John Smith");
        cluster.setUseIPPort4Check(false);
        assertThat(cluster.getDefaultCheckPort(), is(0));
        assertThat(cluster.getDefaultPort(), is(1));
        assertThat(cluster.getHealthChecker(), sameInstance(healthChecker));
        assertThat(cluster.getMetadata(), is(notNullValue()));
        assertThat(cluster.getName(), is("bar"));
        assertThat(cluster.getServiceName(), is("John Smith"));
        assertThat(cluster.isUseIPPort4Check(), is(false));
    }
}
