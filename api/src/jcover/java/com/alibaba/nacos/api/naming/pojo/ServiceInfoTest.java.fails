package com.alibaba.nacos.api.naming.pojo;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.api.naming.pojo.ServiceInfo
 *
 * @author Diffblue Cover
 */

class ServiceInfoTest {

    @Test
    void factory1() {
        ServiceInfo serviceInfo = new ServiceInfo("Acme", "foo");
        serviceInfo.setAllIPs(false);
        serviceInfo.setCacheMillis(1L);
        serviceInfo.setChecksum("foo");
        serviceInfo.setClusters("foo");
        serviceInfo.setGroupName("Acme");
        ArrayList<Instance> hosts = new ArrayList<Instance>();
        Instance instance = new Instance();
        instance.setClusterName("John Smith");
        instance.setEnabled(false);
        instance.setEphemeral(false);
        instance.setHealthy(false);
        instance.setInstanceId("1234");
        instance.setIp("foo");
        instance.setMetadata(new HashMap<String, String>());
        instance.setPort(1);
        instance.setServiceName("Acme");
        instance.setWeight(1.0);
        hosts.add(instance);
        serviceInfo.setHosts(hosts);
        serviceInfo.setJsonFromServer("\"foo\"");
        serviceInfo.setLastRefTime(1L);
        serviceInfo.setName("Acme");
        assertThat(serviceInfo.getCacheMillis(), is(1L));
        assertThat(serviceInfo.getChecksum(), is("foo"));
        assertThat(serviceInfo.getClusters(), is("foo"));
        assertThat(serviceInfo.getGroupName(), is("Acme"));
        assertThat(serviceInfo.getJsonFromServer(), is("\"foo\""));
        assertThat(serviceInfo.getKey(), is("Acme@@foo"));
        assertThat(serviceInfo.getLastRefTime(), is(1L));
        assertThat(serviceInfo.getName(), is("Acme"));
        assertThat(serviceInfo.isAllIPs(), is(false));
        assertThat(serviceInfo.isValid(), is(true));
    }

    @Test
    void factory2() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setAllIPs(false);
        serviceInfo.setCacheMillis(1L);
        serviceInfo.setChecksum("foo");
        serviceInfo.setClusters("foo");
        serviceInfo.setGroupName("Acme");
        serviceInfo.setHosts(null);
        serviceInfo.setJsonFromServer("\"foo\"");
        serviceInfo.setLastRefTime(1L);
        serviceInfo.setName("Acme");
        assertThat(serviceInfo.getCacheMillis(), is(1L));
        assertThat(serviceInfo.getChecksum(), is("foo"));
        assertThat(serviceInfo.getClusters(), is("foo"));
        assertThat(serviceInfo.getGroupName(), is("Acme"));
        assertThat(serviceInfo.getJsonFromServer(), is("\"foo\""));
        assertThat(serviceInfo.getKey(), is("Acme@@foo"));
        assertThat(serviceInfo.getLastRefTime(), is(1L));
        assertThat(serviceInfo.getName(), is("Acme"));
        assertThat(serviceInfo.isAllIPs(), is(false));
        assertThat(serviceInfo.isValid(), is(false));
    }

    @Test
    void factory3() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setAllIPs(false);
        serviceInfo.setCacheMillis(1L);
        serviceInfo.setChecksum("foo");
        serviceInfo.setClusters("foo");
        serviceInfo.setGroupName("Acme");
        serviceInfo.setHosts(new ArrayList<Instance>());
        serviceInfo.setJsonFromServer("\"foo\"");
        serviceInfo.setLastRefTime(1L);
        serviceInfo.setName("Acme");
        assertThat(serviceInfo.getCacheMillis(), is(1L));
        assertThat(serviceInfo.getChecksum(), is("foo"));
        assertThat(serviceInfo.getClusters(), is("foo"));
        assertThat(serviceInfo.getGroupName(), is("Acme"));
        assertThat(serviceInfo.getJsonFromServer(), is("\"foo\""));
        assertThat(serviceInfo.getKey(), is("Acme@@foo"));
        assertThat(serviceInfo.getLastRefTime(), is(1L));
        assertThat(serviceInfo.getName(), is("Acme"));
        assertThat(serviceInfo.isAllIPs(), is(false));
        assertThat(serviceInfo.isValid(), is(true));
    }

    @Test
    void factory4() {
        ServiceInfo serviceInfo = new ServiceInfo("key");
        serviceInfo.setAllIPs(false);
        serviceInfo.setCacheMillis(1L);
        serviceInfo.setChecksum("foo");
        serviceInfo.setClusters("foo");
        serviceInfo.setGroupName("Acme");
        serviceInfo.setHosts(new ArrayList<Instance>());
        serviceInfo.setJsonFromServer("\"foo\"");
        serviceInfo.setLastRefTime(1L);
        serviceInfo.setName("Acme");
        assertThat(serviceInfo.getCacheMillis(), is(1L));
        assertThat(serviceInfo.getChecksum(), is("foo"));
        assertThat(serviceInfo.getClusters(), is("foo"));
        assertThat(serviceInfo.getGroupName(), is("Acme"));
        assertThat(serviceInfo.getJsonFromServer(), is("\"foo\""));
        assertThat(serviceInfo.getKey(), is("Acme@@foo"));
        assertThat(serviceInfo.getLastRefTime(), is(1L));
        assertThat(serviceInfo.getName(), is("Acme"));
        assertThat(serviceInfo.isAllIPs(), is(false));
        assertThat(serviceInfo.isValid(), is(true));
    }

    @Test
    void ipCountReturnsOne() {
        ServiceInfo serviceInfo = new ServiceInfo();
        ArrayList<Instance> hosts = new ArrayList<Instance>();
        hosts.add(new Instance());
        serviceInfo.setHosts(hosts);
        assertThat(serviceInfo.ipCount(), is(1));
    }

    @Test
    void ipCountReturnsZero() {
        assertThat(new ServiceInfo().ipCount(), is(0));
    }

    @Test
    void expiredReturnsTrue() {
        assertThat(new ServiceInfo().expired(), is(true));
    }

    @Test
    void getHosts() {

        // arrange
        ServiceInfo serviceInfo = new ServiceInfo();
        ArrayList<Instance> hosts = new ArrayList<Instance>();
        Instance instance = new Instance();
        hosts.add(instance);
        serviceInfo.setHosts(hosts);

        // act
        List<Instance> result = serviceInfo.getHosts();

        // assert
        assertThat(result.size(), is(1));
        assertThat(result.get(0), sameInstance(instance));
    }

    @Test
    void validate1() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setAllIPs(true);
        assertThat(serviceInfo.validate(), is(true));
    }

    @Test
    void validate2() {
        assertThat(new ServiceInfo().validate(), is(true));
    }

    @Test
    void validate3() {
        ServiceInfo serviceInfo = new ServiceInfo();
        ArrayList<Instance> hosts = new ArrayList<Instance>();
        Instance instance = new Instance();
        instance.setHealthy(false);
        hosts.add(instance);
        serviceInfo.setHosts(hosts);
        assertThat(serviceInfo.validate(), is(true));
    }

    @Test
    void validate4() {
        ServiceInfo serviceInfo = new ServiceInfo();
        ArrayList<Instance> hosts = new ArrayList<Instance>();
        hosts.add(new Instance());
        serviceInfo.setHosts(hosts);
        assertThat(serviceInfo.validate(), is(true));
    }

    @Test
    void getKeyEncoded() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setClusters("foo");
        serviceInfo.setName("Acme");
        assertThat(serviceInfo.getKeyEncoded(), is("Acme@@foo"));
    }

    @Test
    void fromKeyKeyIsKey() {
        ServiceInfo result = ServiceInfo.fromKey("key");
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is(nullValue()));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is(nullValue()));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is(nullValue()));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
    }

    @Test
    void getKey() {
        assertThat(ServiceInfo.getKey("Acme", ""), is("Acme"));
        assertThat(ServiceInfo.getKey("Acme", "key"), is("Acme@@key"));
    }
}
