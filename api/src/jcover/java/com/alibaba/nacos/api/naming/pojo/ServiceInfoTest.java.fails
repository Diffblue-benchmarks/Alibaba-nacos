package com.alibaba.nacos.api.naming.pojo;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.nullValue;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.api.naming.pojo.ServiceInfo
 *
 * @author Diffblue JCover
 */

public class ServiceInfoTest {

    @Test(timeout=10000)
    public void expired() {
        assertThat(new ServiceInfo().expired(), is(true));
        assertThat(new ServiceInfo("foo").expired(), is(true));
        assertThat(new ServiceInfo("bar", "foo").expired(), is(true));
    }

    @Test(timeout=10000)
    public void fromKeyKeyIsFoo() {
        ServiceInfo result = ServiceInfo.fromKey("foo");
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is(nullValue()));
        assertThat(result.getGroupName(), is(nullValue()));
        assertTrue(result.getHosts().isEmpty());
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is(nullValue()));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is(nullValue()));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
    }

    @Test(timeout=10000)
    public void getCacheMillisReturnsOneThousand() {
        assertThat(new ServiceInfo().getCacheMillis(), is(1_000L));
    }

    @Test(timeout=10000)
    public void getKey() {
        assertThat(ServiceInfo.getKey("bar", ""), is("bar"));
        assertThat(ServiceInfo.getKey("bar", "foo"), is("bar@@foo"));
    }

    @Test(timeout=10000)
    public void getLastRefTimeReturnsZero() {
        assertThat(new ServiceInfo().getLastRefTime(), is(0L));
    }

    @Test(timeout=10000)
    public void ipCountReturnsZero() {
        assertThat(new ServiceInfo().ipCount(), is(0));
    }

    @Test(timeout=10000)
    public void isAllIPsReturnsFalse() {
        assertThat(new ServiceInfo().isAllIPs(), is(false));
    }

    @Test(timeout=10000)
    public void isValidReturnsTrue() {
        assertThat(new ServiceInfo().isValid(), is(true));
    }

    @Test(timeout=10000)
    public void setAllIPsToFalse() {
        new ServiceInfo().setAllIPs(false);
    }

    @Test(timeout=10000)
    public void setCacheMillisToOne() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setCacheMillis(1L);
        assertThat(serviceInfo.getCacheMillis(), is(1L));
    }

    @Test(timeout=10000)
    public void setChecksumToFoo() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setChecksum("foo");
        assertThat(serviceInfo.getChecksum(), is("foo"));
    }

    @Test(timeout=10000)
    public void setClustersToFoo() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setClusters("foo");
        assertThat(serviceInfo.getClusters(), is("foo"));
        assertThat(serviceInfo.getKey(), is("null@@foo"));
    }

    @Test(timeout=10000)
    public void setGroupName() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setGroupName("/bin/bash");
        assertThat(serviceInfo.getGroupName(), is("/bin/bash"));
    }

    @Test(timeout=10000)
    public void setHostsToEmpty() {
        new ServiceInfo().setHosts(new ArrayList<Instance>());
    }

    @Test(timeout=10000)
    public void setJsonFromServer() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setJsonFromServer("\"foo\"");
        assertThat(serviceInfo.getJsonFromServer(), is("\"foo\""));
    }

    @Test(timeout=10000)
    public void setLastRefTimeToOne() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setLastRefTime(1L);
        assertThat(serviceInfo.getLastRefTime(), is(1L));
    }

    @Test(timeout=10000)
    public void setName() {
        ServiceInfo serviceInfo = new ServiceInfo();
        serviceInfo.setName("/bin/bash");
        assertThat(serviceInfo.getKey(), is("/bin/bash"));
        assertThat(serviceInfo.getKeyEncoded(), is("%2Fbin%2Fbash"));
        assertThat(serviceInfo.getName(), is("/bin/bash"));
    }

    @Test(timeout=10000)
    public void validateReturnsTrue() {
        assertThat(new ServiceInfo().validate(), is(true));
    }
}
