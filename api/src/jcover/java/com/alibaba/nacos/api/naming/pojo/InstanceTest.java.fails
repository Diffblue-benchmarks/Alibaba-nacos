package com.alibaba.nacos.api.naming.pojo;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.api.naming.pojo.Instance
 *
 * @author Diffblue JCover
 */

public class InstanceTest {

    @Test(timeout=10000)
    public void addMetadataKeyIsFooAndValueIsFoo() {
        Instance instance = new Instance();
        instance.addMetadata("foo", "foo");
        assertThat(instance.getMetadata().get("foo"), is("foo"));
    }

    @Test(timeout=10000)
    public void getInstanceHeartBeatInterval() {
        assertThat(new Instance().getInstanceHeartBeatInterval(), is(5_000L));
    }

    @Test(timeout=10000)
    public void getInstanceHeartBeatTimeOut() {
        assertThat(new Instance().getInstanceHeartBeatTimeOut(), is(15_000L));
    }

    @Test(timeout=10000)
    public void getIpDeleteTimeout() {
        assertThat(new Instance().getIpDeleteTimeout(), is(30_000L));
    }

    @Test(timeout=10000)
    public void getPortReturnsZero() {
        assertThat(new Instance().getPort(), is(0));
    }

    @Test(timeout=10000)
    public void getWeightReturnsOne() {
        assertEquals(1.0, new Instance().getWeight(), 0);
    }

    @Test(timeout=10000)
    public void isEnabledReturnsTrue() {
        assertThat(new Instance().isEnabled(), is(true));
    }

    @Test(timeout=10000)
    public void isEphemeralReturnsTrue() {
        assertThat(new Instance().isEphemeral(), is(true));
    }

    @Test(timeout=10000)
    public void isHealthyReturnsTrue() {
        assertThat(new Instance().isHealthy(), is(true));
    }

    @Test(timeout=10000)
    public void setClusterName() {
        Instance instance = new Instance();
        instance.setClusterName("/bin/bash");
        assertThat(instance.getClusterName(), is("/bin/bash"));
    }

    @Test(timeout=10000)
    public void setEnabledToFalse() {
        Instance instance = new Instance();
        instance.setEnabled(false);
        assertThat(instance.isEnabled(), is(false));
    }

    @Test(timeout=10000)
    public void setEphemeralToFalse() {
        Instance instance = new Instance();
        instance.setEphemeral(false);
        assertThat(instance.isEphemeral(), is(false));
    }

    @Test(timeout=10000)
    public void setHealthyToFalse() {
        Instance instance = new Instance();
        instance.setHealthy(false);
        assertThat(instance.isHealthy(), is(false));
    }

    @Test(timeout=10000)
    public void setInstanceIdToFoo() {
        Instance instance = new Instance();
        instance.setInstanceId("foo");
        assertThat(instance.getInstanceId(), is("foo"));
    }

    @Test(timeout=10000)
    public void setIpToFoo() {
        Instance instance = new Instance();
        instance.setIp("foo");
        assertThat(instance.getIp(), is("foo"));
    }

    @Test(timeout=10000)
    public void setMetadataToEmpty() {
        Instance instance = new Instance();
        Map<String, String> metadata = new HashMap<String, String>();
        instance.setMetadata(metadata);
        assertThat(instance.getMetadata(), sameInstance(metadata));
    }

    @Test(timeout=10000)
    public void setPortToOne() {
        Instance instance = new Instance();
        instance.setPort(1);
        assertThat(instance.getPort(), is(1));
    }

    @Test(timeout=10000)
    public void setServiceName() {
        Instance instance = new Instance();
        instance.setServiceName("/bin/bash");
        assertThat(instance.getServiceName(), is("/bin/bash"));
    }

    @Test(timeout=10000)
    public void setWeightToOne() {
        new Instance().setWeight(1.0);
    }

    @Test(timeout=10000)
    public void testequals() {
        assertThat(new Instance().equals("foo"), is(false));
        assertThat(new Instance().equals(new Instance()), is(true));
    }

    @Test(timeout=10000)
    public void toInetAddr() {
        assertThat(new Instance().toInetAddr(), is("null:0"));
    }
}
