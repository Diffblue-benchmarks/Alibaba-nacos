package com.alibaba.nacos.core.listener;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Properties;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.support.BeanNameGenerator;
import org.springframework.boot.Banner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.WebApplicationType;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.io.ResourceLoader;

/**
 * Unit tests for com.alibaba.nacos.core.listener.StartingSpringApplicationRunListener
 *
 * @author Diffblue Cover
 */

class StartingSpringApplicationRunListenerTest {

    @Test
    void factory() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "foo" };
        assertThat(new StartingSpringApplicationRunListener(application, args).getOrder(), is(-2_147_483_648));
    }

    @Test
    void starting() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        SpringApplication application = new SpringApplication(primarySources1);
        LinkedList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializers =
             new LinkedList<ApplicationContextInitializer<ConfigurableApplicationContext>>();
        @SuppressWarnings("unchecked")
        ApplicationContextInitializer<ConfigurableApplicationContext> applicationContextInitializer =
             mock(ApplicationContextInitializer.class);
        initializers.add(applicationContextInitializer);
        application.setInitializers(initializers);
        LinkedList<ApplicationListener<ApplicationEvent>> listeners =
             new LinkedList<ApplicationListener<ApplicationEvent>>();
        @SuppressWarnings("unchecked")
        ApplicationListener<ApplicationEvent> applicationListener =
             mock(ApplicationListener.class);
        listeners.add(applicationListener);
        application.setListeners(listeners);
        application.setLogStartupInfo(false);
        application.setMainApplicationClass(String.class);
        application.setRegisterShutdownHook(false);
        ResourceLoader resourceLoader2 = mock(ResourceLoader.class);
        application.setResourceLoader(resourceLoader2);
        application.setSources(new HashSet<String>());
        application.setWebApplicationType(WebApplicationType.NONE);
        String[] args = new String[] { "foo" };
        new StartingSpringApplicationRunListener(application, args).starting();
    }

    @Test
    void environmentPrepared() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "foo" };
        ConfigurableEnvironment environment =
             mock(ConfigurableEnvironment.class);
        new StartingSpringApplicationRunListener(application, args).environmentPrepared(environment);
    }

    @Test
    void contextPrepared() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "foo" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new StartingSpringApplicationRunListener(application, args).contextPrepared(context);
    }

    @Test
    void contextLoaded1() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "foo" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new StartingSpringApplicationRunListener(application, args).contextLoaded(context);
    }

    @Test
    void contextLoaded2() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        SpringApplication application = new SpringApplication(primarySources1);
        application.setAddCommandLineProperties(false);
        application.setAddConversionService(false);
        application.setAdditionalProfiles("octet-stream");
        application.setAllowBeanDefinitionOverriding(false);
        application.setApplicationContextClass(ConfigurableApplicationContext.class);
        Banner banner = mock(Banner.class);
        application.setBanner(banner);
        application.setBannerMode(Banner.Mode.OFF);
        BeanNameGenerator beanNameGenerator = mock(BeanNameGenerator.class);
        application.setBeanNameGenerator(beanNameGenerator);
        application.setDefaultProperties(new HashMap<String, Object>());
        application.setDefaultProperties(new Properties());
        ConfigurableEnvironment environment =
             mock(ConfigurableEnvironment.class);
        application.setEnvironment(environment);
        application.setHeadless(false);
        LinkedList<ApplicationContextInitializer<ConfigurableApplicationContext>> initializers =
             new LinkedList<ApplicationContextInitializer<ConfigurableApplicationContext>>();
        @SuppressWarnings("unchecked")
        ApplicationContextInitializer<ConfigurableApplicationContext> applicationContextInitializer =
             mock(ApplicationContextInitializer.class);
        initializers.add(applicationContextInitializer);
        application.setInitializers(initializers);
        application.setListeners(new LinkedList<ApplicationListener<ApplicationEvent>>());
        application.setLogStartupInfo(false);
        application.setMainApplicationClass(String.class);
        application.setRegisterShutdownHook(false);
        ResourceLoader resourceLoader2 = mock(ResourceLoader.class);
        application.setResourceLoader(resourceLoader2);
        HashSet<String> sources = new HashSet<String>();
        sources.add("");
        application.setSources(sources);
        application.setWebApplicationType(WebApplicationType.NONE);
        String[] args = new String[] { "foo" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new StartingSpringApplicationRunListener(application, args).contextLoaded(context);
    }

    @Test
    void started() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "foo" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new StartingSpringApplicationRunListener(application, args).started(context);
    }

    @Test
    void running() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        String[] args = new String[] { "foo" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new StartingSpringApplicationRunListener(new SpringApplication(primarySources1), args).running(context);
    }

    @Test
    void failed() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        SpringApplication application = new SpringApplication(primarySources1);
        application.setAllowBeanDefinitionOverriding(false);
        BeanNameGenerator beanNameGenerator = mock(BeanNameGenerator.class);
        application.setBeanNameGenerator(beanNameGenerator);
        application.setDefaultProperties(new Properties());
        ConfigurableEnvironment environment =
             mock(ConfigurableEnvironment.class);
        application.setEnvironment(environment);
        application.setHeadless(false);
        LinkedList<ApplicationListener<ApplicationEvent>> listeners =
             new LinkedList<ApplicationListener<ApplicationEvent>>();
        @SuppressWarnings("unchecked")
        ApplicationListener<ApplicationEvent> applicationListener =
             mock(ApplicationListener.class);
        listeners.add(applicationListener);
        application.setListeners(listeners);
        application.setLogStartupInfo(false);
        application.setMainApplicationClass(String.class);
        application.setRegisterShutdownHook(false);
        ResourceLoader resourceLoader2 = mock(ResourceLoader.class);
        application.setResourceLoader(resourceLoader2);
        application.setSources(new HashSet<String>());
        application.setWebApplicationType(WebApplicationType.NONE);
        String[] args = new String[] { "foo" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        Exception exception = new Exception();
        exception.setStackTrace(new StackTraceElement[] { });
        new StartingSpringApplicationRunListener(application, args).failed(context, exception);
    }
}
