package com.alibaba.nacos.core.listener;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;

/**
 * Unit tests for com.alibaba.nacos.core.listener.LoggingSpringApplicationRunListener
 *
 * @author Diffblue Cover
 */

class LoggingSpringApplicationRunListenerTest {

    @Test
    void factory() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "DE" };
        assertThat(new LoggingSpringApplicationRunListener(application, args).getOrder(), is(-2_147_483_648));
    }

    @Test
    void starting() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        String[] args = new String[] { "DE" };
        new LoggingSpringApplicationRunListener(new SpringApplication(primarySources1), args).starting();
    }

    @Test
    void environmentPrepared1() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "DE" };
        ConfigurableEnvironment environment =
             mock(ConfigurableEnvironment.class);
        when(environment.containsProperty(Mockito.<String>any()))
            .thenReturn(false);
        new LoggingSpringApplicationRunListener(application, args).environmentPrepared(environment);
    }

    @Test
    void environmentPrepared2() {
        SpringApplication application = mock(SpringApplication.class);
        String[] args = new String[] { "DE" };
        ConfigurableEnvironment environment =
             mock(ConfigurableEnvironment.class);
        when(environment.containsProperty(Mockito.<String>any()))
            .thenReturn(true);
        new LoggingSpringApplicationRunListener(application, args).environmentPrepared(environment);
    }

    @Test
    void contextPrepared() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        String[] args = new String[] { "DE" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new LoggingSpringApplicationRunListener(new SpringApplication(primarySources1), args).contextPrepared(context);
    }

    @Test
    void contextLoaded() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        String[] args = new String[] { "DE" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new LoggingSpringApplicationRunListener(new SpringApplication(primarySources1), args).contextLoaded(context);
    }

    @Test
    void started() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        String[] args = new String[] { "DE" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new LoggingSpringApplicationRunListener(new SpringApplication(primarySources1), args).started(context);
    }

    @Test
    void running() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        String[] args = new String[] { "DE" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        new LoggingSpringApplicationRunListener(new SpringApplication(primarySources1), args).running(context);
    }

    @Test
    void failed() {
        Class<?>[] primarySources1 = new Class[] { String.class };
        String[] args = new String[] { "DE" };
        ConfigurableApplicationContext context =
             mock(ConfigurableApplicationContext.class);
        Exception exception = new Exception();
        exception.setStackTrace(new StackTraceElement[] { });
        new LoggingSpringApplicationRunListener(new SpringApplication(primarySources1), args).failed(context, exception);
    }
}
