package com.alibaba.nacos.client.config.http;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

import com.alibaba.nacos.client.config.impl.ServerListManager;

import java.util.Properties;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.client.config.http.ServerHttpAgent
 *
 * @author Diffblue Cover
 */

class ServerHttpAgentTest {

    @Test
    void factory1() {
        Properties properties2 = new Properties();
        properties2.setProperty("key", "value");
        assertThat(new ServerHttpAgent(new ServerListManager(), properties2).getEncode(), is("UTF-8"));
    }

    @Test
    void factory2() {
        Properties properties2 = new Properties();
        properties2.setProperty("accessKey", "value");
        assertThat(new ServerHttpAgent(new ServerListManager(), properties2).getEncode(), is("UTF-8"));
    }

    @Test
    void factory3() {
        Properties properties2 = new Properties();
        properties2.setProperty("ramRoleName", "value");
        assertThat(new ServerHttpAgent(new ServerListManager(), properties2).getEncode(), is("UTF-8"));
    }

    @Test
    void factory4() {
        Properties properties2 = new Properties();
        properties2.setProperty("secretKey", "value");
        assertThat(new ServerHttpAgent(new ServerListManager(), properties2).getEncode(), is("UTF-8"));
    }

    @Test
    void getAppnameReturnsUnknown() {
        assertThat(ServerHttpAgent.getAppname(), is("unknown"));
    }

    @Test
    void start() throws com.alibaba.nacos.api.exception.NacosException {
        new ServerHttpAgent(new ServerListManager(new java.util.ArrayList<String>())).start();
    }

    @Test
    void getNameReturnsDefault() {
        assertThat(new ServerHttpAgent(new ServerListManager()).getName(), is("default"));
    }

    @Test
    void getNamespaceReturnsEmpty() {
        assertThat(new ServerHttpAgent(new ServerListManager()).getNamespace(), is(""));
    }

    @Test
    void getTenantReturnsEmpty() {
        assertThat(new ServerHttpAgent(new ServerListManager()).getTenant(), is(""));
    }
}
