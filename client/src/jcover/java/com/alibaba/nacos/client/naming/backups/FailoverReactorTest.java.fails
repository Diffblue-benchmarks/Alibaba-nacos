package com.alibaba.nacos.client.naming.backups;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.pojo.ServiceInfo;
import com.alibaba.nacos.client.naming.core.EventDispatcher;
import com.alibaba.nacos.client.naming.core.HostReactor;
import com.alibaba.nacos.client.naming.net.NamingProxy;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.client.naming.backups.FailoverReactor
 *
 * @author Diffblue Cover
 */

class FailoverReactorTest {

    @Test
    void addDayNumIsOne() throws java.text.ParseException {
        EventDispatcher eventDispatcher1 = new EventDispatcher();
        ThreadFactory x5 = mock(ThreadFactory.class);
        eventDispatcher1.setExecutor(Executors.newSingleThreadExecutor(x5));
        NamingProxy serverProxy1 =
             new NamingProxy("1234", "api.github.com", "Smith");
        Properties properties1 = new Properties();
        properties1.setProperty("key", "value");
        serverProxy1.setProperties(properties1);
        serverProxy1.setServerPort(1);
        assertThat(new FailoverReactor(new HostReactor(eventDispatcher1, serverProxy1, "OX13QD"), "foo").addDay(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31"), 1), equalTo(new Date("Jan 01 2011")));
    }

    @Test
    void isFailoverSwitchReturnsFalse() {
        assertThat(new FailoverReactor(new HostReactor(new EventDispatcher(), new NamingProxy("1234", "api.github.com", "Smith"), "OX13QD"), "foo").isFailoverSwitch(), is(false));
    }

    @Test
    void getServiceKeyIsKey() {
        ServiceInfo result =
             new FailoverReactor(new HostReactor(new EventDispatcher(), new NamingProxy("1234", "api.github.com", "Smith"), "OX13QD"), "foo").getService("key");
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is(nullValue()));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is("key"));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is("key"));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
    }
}
