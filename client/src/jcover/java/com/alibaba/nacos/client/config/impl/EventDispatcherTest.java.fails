package com.alibaba.nacos.client.config.impl;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.client.config.impl.EventDispatcher
 *
 * @author Diffblue Cover
 */

class EventDispatcherTest {

    @Test
    void addEventListener() {
        List<Class<? extends EventDispatcher.AbstractEvent>> list =
             new ArrayList<Class<? extends EventDispatcher.AbstractEvent>>();
        list.add(EventDispatcher.AbstractEvent.class);
        EventDispatcher.AbstractEventListener listener =
             mock(EventDispatcher.AbstractEventListener.class);
        when(listener.interest())
            .thenReturn(list);
        EventDispatcher.addEventListener(listener);
    }

    @Test
    void fireEvent1() {
        EventDispatcher.AbstractEvent abstractEvent =
             mock(EventDispatcher.AbstractEvent.class);
        when(abstractEvent.implyEvents())
            .thenReturn(new ArrayList<EventDispatcher.AbstractEvent>());
        EventDispatcher.fireEvent(abstractEvent);
    }

    @Test
    void fireEvent2() {
        List<EventDispatcher.AbstractEvent> list1 =
             new ArrayList<EventDispatcher.AbstractEvent>();
        EventDispatcher.AbstractEvent abstractEvent1 =
             mock(EventDispatcher.AbstractEvent.class);
        when(abstractEvent1.implyEvents())
            .thenReturn(new ArrayList<EventDispatcher.AbstractEvent>());
        list1.add(abstractEvent1);
        EventDispatcher.AbstractEvent abstractEvent2 =
             mock(EventDispatcher.AbstractEvent.class);
        when(abstractEvent2.implyEvents())
            .thenReturn(list1);
        EventDispatcher.fireEvent(abstractEvent2);
    }

    @Test
    void getListenerListEventTypeIsNestedClassReturnsEmpty() {
        assertThat(EventDispatcher.getListenerList(EventDispatcher.AbstractEvent.class), empty());
    }
}
