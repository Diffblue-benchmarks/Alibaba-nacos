package com.alibaba.nacos.client.utils;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.client.utils.ParamUtil
 *
 * @author Diffblue JCover
 */

public class ParamUtilTest {

    @Test(timeout=10000)
    public void getAppKeyReturnsEmpty() {
        assertThat(ParamUtil.getAppKey(), is(""));
    }

    @Test(timeout=10000)
    public void getAppNameReturnsUnknown() {
        assertThat(ParamUtil.getAppName(), is("unknown"));
    }

    @Test(timeout=10000)
    public void getClientVersion() {
        assertThat(ParamUtil.getClientVersion(), is("${project.version}"));
    }

    @Test(timeout=10000)
    public void getConnectTimeoutReturnsOneThousand() {
        assertThat(ParamUtil.getConnectTimeout(), is(1_000));
    }

    @Test(timeout=10000)
    public void getDefaultContextPathReturnsNacos() {
        assertThat(ParamUtil.getDefaultContextPath(), is("nacos"));
    }

    @Test(timeout=10000)
    public void getDefaultNodesPathReturnsServerlist() {
        assertThat(ParamUtil.getDefaultNodesPath(), is("serverlist"));
    }

    @Test(timeout=10000)
    public void getDefaultServerPort() {
        assertThat(ParamUtil.getDefaultServerPort(), is("8848"));
    }

    @Test(timeout=10000)
    public void getPerTaskConfigSize() {
        assertEquals(3000.0, ParamUtil.getPerTaskConfigSize(), 0);
    }

    @Test(timeout=10000)
    public void parsingEndpointRule() {
        assertThat(ParamUtil.parsingEndpointRule("api.github.com"), is("api.github.com"));
        assertThat(ParamUtil.parsingEndpointRule(""), is(""));
        assertThat(ParamUtil.parsingEndpointRule(null), is(""));
    }

    @Test(timeout=10000)
    public void setAppKeyAppKeyIsName() {
        ParamUtil.setAppKey("name");
    }

    @Test(timeout=10000)
    public void setAppNameAppNameIsName() {
        ParamUtil.setAppName("name");
    }

    @Test(timeout=10000)
    public void setClientVersionClientVersionIsMr() {
        ParamUtil.setClientVersion("Mr");
    }

    @Test(timeout=10000)
    public void setConnectTimeoutConnectTimeoutIsOne() {
        ParamUtil.setConnectTimeout(1);
    }

    @Test(timeout=10000)
    public void setDefaultContextPath() {
        ParamUtil.setDefaultContextPath("/bin/bash");
    }

    @Test(timeout=10000)
    public void setDefaultNodesPath() {
        ParamUtil.setDefaultNodesPath("/bin/bash");
    }

    @Test(timeout=10000)
    public void setPerTaskConfigSizePerTaskConfigSizeIsOne() {
        ParamUtil.setPerTaskConfigSize(1.0);
    }
}
