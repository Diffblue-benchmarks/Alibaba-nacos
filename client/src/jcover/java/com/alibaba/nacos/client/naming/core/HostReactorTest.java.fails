package com.alibaba.nacos.client.naming.core;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.pojo.ServiceInfo;
import com.alibaba.nacos.client.naming.net.NamingProxy;

import java.util.Properties;
import java.util.concurrent.ExecutorService;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.client.naming.core.HostReactor
 *
 * @author Diffblue Cover
 */

class HostReactorTest {

    @Test
    void factory1() {
        EventDispatcher eventDispatcher = new EventDispatcher();
        ExecutorService executor = mock(ExecutorService.class);
        eventDispatcher.setExecutor(executor);
        NamingProxy serverProxy = mock(NamingProxy.class);
        assertThat(new HostReactor(eventDispatcher, serverProxy, "OX13QD").getServiceInfoMap().isEmpty(), is(true));
    }

    @Test
    void factory2() {
        EventDispatcher eventDispatcher = new EventDispatcher();
        ExecutorService executor = mock(ExecutorService.class);
        eventDispatcher.setExecutor(executor);
        NamingProxy serverProxy =
             new NamingProxy("1234", "api.github.com", "Smith");
        serverProxy.setProperties(new Properties());
        serverProxy.setServerPort(1);
        assertThat(new HostReactor(eventDispatcher, serverProxy, "OX13QD", true, 1).getServiceInfoMap().isEmpty(), is(true));
    }

    @Test
    void getServiceInfo1() {

        // arrange
        NamingProxy serverProxy1 = mock(NamingProxy.class);
        HostReactor hostReactor =
             new HostReactor(new EventDispatcher(), serverProxy1, "OX13QD");

        // act
        ServiceInfo result = hostReactor.getServiceInfo("Acme", "OX13QD");

        // assert
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is("OX13QD"));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is("Acme@@OX13QD"));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is("Acme"));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
        assertThat(hostReactor.getServiceInfoMap().get("Acme@@OX13QD"), sameInstance(result));
    }

    @Test
    void getServiceInfo2() {

        // arrange
        EventDispatcher eventDispatcher = new EventDispatcher();
        ExecutorService executor = mock(ExecutorService.class);
        eventDispatcher.setExecutor(executor);
        NamingProxy serverProxy =
             new NamingProxy("1234", "[NA] failed to update serviceName: ", "Smith");
        serverProxy.setProperties(new Properties());
        serverProxy.setServerPort(1);
        HostReactor hostReactor =
             new HostReactor(eventDispatcher, serverProxy, "OX13QD", false, 1);

        // act
        ServiceInfo result = hostReactor.getServiceInfo("Acme", "OX13QD");

        // assert
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is("OX13QD"));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is("Acme@@OX13QD"));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is("Acme"));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
        assertThat(hostReactor.getServiceInfoMap().get("Acme@@OX13QD"), sameInstance(result));
    }

    @Test
    void getServiceInfo3() {

        // arrange
        EventDispatcher eventDispatcher = new EventDispatcher();
        ExecutorService executor = mock(ExecutorService.class);
        eventDispatcher.setExecutor(executor);
        NamingProxy serverProxy = new NamingProxy("1234", "foo", "Smith");
        serverProxy.setProperties(new Properties());
        serverProxy.setServerPort(1);
        HostReactor hostReactor =
             new HostReactor(eventDispatcher, serverProxy, "OX13QD", false, 1);

        // act
        ServiceInfo result = hostReactor.getServiceInfo("Acme", "OX13QD");

        // assert
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is("OX13QD"));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is("Acme@@OX13QD"));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is("Acme"));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
        assertThat(hostReactor.getServiceInfoMap().get("Acme@@OX13QD"), sameInstance(result));
    }

    @Test
    void getServiceInfo4() {

        // arrange
        EventDispatcher eventDispatcher = new EventDispatcher();
        ExecutorService executor = mock(ExecutorService.class);
        eventDispatcher.setExecutor(executor);
        NamingProxy serverProxy =
             new NamingProxy("1234", "api.github.com", "[NA] failed to update serviceName: ");
        serverProxy.setProperties(new Properties());
        HostReactor hostReactor =
             new HostReactor(eventDispatcher, serverProxy, "OX13QD", false, 1);

        // act
        ServiceInfo result = hostReactor.getServiceInfo("Acme", "OX13QD");

        // assert
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is("OX13QD"));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is("Acme@@OX13QD"));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is("Acme"));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
        assertThat(hostReactor.getServiceInfoMap().get("Acme@@OX13QD"), sameInstance(result));
    }

    @Test
    void getServiceInfo5() {

        // arrange
        EventDispatcher eventDispatcher = new EventDispatcher();
        ExecutorService executor = mock(ExecutorService.class);
        eventDispatcher.setExecutor(executor);
        HostReactor hostReactor =
             new HostReactor(eventDispatcher, new NamingProxy("1234", "api.github.com", "bar"), "OX13QD", false, 1);

        // act
        ServiceInfo result = hostReactor.getServiceInfo("Acme", "OX13QD");

        // assert
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is("OX13QD"));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is("Acme@@OX13QD"));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is("Acme"));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
        assertThat(hostReactor.getServiceInfoMap().get("Acme@@OX13QD"), sameInstance(result));
    }

    @Test
    void getServiceInfo6() {

        // arrange
        NamingProxy serverProxy =
             new NamingProxy("1234", "api.github.com", "Smith");
        serverProxy.setProperties(new Properties());
        HostReactor hostReactor =
             new HostReactor(new EventDispatcher(), serverProxy, "OX13QD", false, 1);

        // act
        ServiceInfo result = hostReactor.getServiceInfo("Acme", "OX13QD");

        // assert
        assertThat(result.getCacheMillis(), is(1_000L));
        assertThat(result.getChecksum(), is(""));
        assertThat(result.getClusters(), is("OX13QD"));
        assertThat(result.getGroupName(), is(nullValue()));
        assertThat(result.getJsonFromServer(), is(""));
        assertThat(result.getKey(), is("Acme@@OX13QD"));
        assertThat(result.getLastRefTime(), is(0L));
        assertThat(result.getName(), is("Acme"));
        assertThat(result.isAllIPs(), is(false));
        assertThat(result.isValid(), is(true));
        assertThat(hostReactor.getServiceInfoMap().get("Acme@@OX13QD"), sameInstance(result));
    }

    @Test
    void refreshOnlyServiceNameIsAcme() {
        NamingProxy serverProxy1 =
             new NamingProxy("1234", "api.github.com", "Smith");
        serverProxy1.setServerPort(1);
        new HostReactor(new EventDispatcher(), serverProxy1, "OX13QD").refreshOnly("Acme", "OX13QD");
    }
}
