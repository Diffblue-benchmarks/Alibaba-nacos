package com.alibaba.nacos.client.identify;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.mockito.Mockito.mock;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.client.identify.CredentialService
 *
 * @author Diffblue Cover
 */

class CredentialServiceTest {

    @Test
    void freeInstanceReturnsNull() {
        assertThat(CredentialService.freeInstance(), is(nullValue()));
    }

    @Test
    void getCredential1() {
        CredentialService credentialService = CredentialService.getInstance();
        credentialService.setAccessKey("key");
        Credentials credential1 = new Credentials();
        credential1.setAccessKey("key");
        credential1.setSecretKey("key");
        credential1.setTenantId("1234");
        credentialService.setCredential(credential1);
        credentialService.setSecretKey("key");
        Credentials credential2 = new Credentials();
        credential2.setAccessKey("key");
        credential2.setSecretKey("key");
        credential2.setTenantId("1234");
        credentialService.setStaticCredential(credential2);
        assertThat(credentialService.getCredential(), sameInstance(credential2));
    }

    @Test
    void getCredential2() {
        CredentialService credentialService =
             CredentialService.freeInstance("data");
        Credentials credential1 = new Credentials();
        credential1.setAccessKey("key");
        credential1.setSecretKey("key");
        credential1.setTenantId("1234");
        credentialService.setCredential(credential1);
        credentialService.setSecretKey("key");
        Credentials credential2 = new Credentials();
        credential2.setAccessKey("key");
        credential2.setSecretKey("key");
        credential2.setTenantId("1234");
        credentialService.setStaticCredential(credential2);
        assertThat(credentialService.getCredential(), sameInstance(credential2));
    }

    @Test
    void getCredential3() {
        CredentialService credentialService =
             CredentialService.getInstance("data");
        Credentials credential1 = new Credentials();
        credential1.setAccessKey("key");
        credential1.setSecretKey("key");
        credential1.setTenantId("1234");
        credentialService.setCredential(credential1);
        credentialService.setSecretKey("key");
        Credentials credential2 = new Credentials();
        credential2.setAccessKey("key");
        credential2.setSecretKey("key");
        credential2.setTenantId("1234");
        credentialService.setStaticCredential(credential2);
        assertThat(credentialService.getCredential(), sameInstance(credential2));
    }

    @Test
    void getCredential4() {
        CredentialService credentialService = CredentialService.getInstance();
        Credentials credential2 = new Credentials();
        credential2.setAccessKey("key");
        credential2.setSecretKey("key");
        credentialService.setStaticCredential(credential2);
        assertThat(credentialService.getCredential(), sameInstance(credential2));
    }

    @Test
    void registerCredentialListener() {
        CredentialListener listener = mock(CredentialListener.class);
        CredentialService.getInstance().registerCredentialListener(listener);
    }

    @Test
    void getAccessKeyReturnsKey() {
        assertThat(CredentialService.getInstance().getAccessKey(), is("key"));
    }

    @Test
    void getSecretKeyReturnsKey() {
        assertThat(CredentialService.getInstance().getSecretKey(), is("key"));
    }
}
