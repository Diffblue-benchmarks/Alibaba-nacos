package com.alibaba.nacos.client.config.impl;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;

import java.util.ArrayList;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.client.config.impl.ServerListManager
 *
 * @author Diffblue Cover
 */

class ServerListManagerTest {

    @Test
    void factory1() {
        ArrayList<String> fixed = new ArrayList<String>();
        fixed.add("Smith");
        ServerListManager serverListManager = new ServerListManager(fixed);
        assertThat(serverListManager.getContentPath(), is("nacos"));
        assertThat(serverListManager.getIterator(), is(nullValue()));
        assertThat(serverListManager.getName(), is("fixed-Smith_8848"));
        assertThat(serverListManager.getNamespace(), is(""));
        assertThat(serverListManager.getTenant(), is(""));
    }

    @Test
    void factory2() {
        ArrayList<String> fixed = new ArrayList<String>();
        fixed.add(":");
        ServerListManager serverListManager = new ServerListManager(fixed);
        assertThat(serverListManager.getContentPath(), is("nacos"));
        assertThat(serverListManager.getIterator(), is(nullValue()));
        assertThat(serverListManager.getName(), is("fixed-_"));
        assertThat(serverListManager.getNamespace(), is(""));
        assertThat(serverListManager.getTenant(), is(""));
    }

    @Test
    void factory3() {
        ArrayList<String> fixed = new ArrayList<String>();
        fixed.add("bar");
        ServerListManager serverListManager =
             new ServerListManager(fixed, "Smith");
        assertThat(serverListManager.getContentPath(), is("nacos"));
        assertThat(serverListManager.getIterator(), is(nullValue()));
        assertThat(serverListManager.getName(), is("fixed-bar_8848-Smith"));
        assertThat(serverListManager.getNamespace(), is("Smith"));
        assertThat(serverListManager.getTenant(), is(""));
    }

    @Test
    void start() throws com.alibaba.nacos.api.exception.NacosException {
        ArrayList<String> fixed = new ArrayList<String>();
        fixed.add("Smith");
        new ServerListManager(fixed).start();
    }

    @Test
    void iterator() {
        assertThat(new ServerListManager().iterator().hasNext(), is(false));
    }

    @Test
    void getUrlString() {
        assertThat(new ServerListManager().getUrlString(), is("[]"));
    }

    @Test
    void contain() throws com.alibaba.nacos.api.exception.NacosException {
        assertThat(new ServerListManager().contain("Smith"), is(false));
        assertThat(new ServerListManager("api.github.com").contain("Smith"), is(false));
        assertThat(new ServerListManager("OX13QD", 1).contain("Smith"), is(false));
        assertThat(new ServerListManager("api.github.com", "Smith").contain("Smith"), is(false));
    }

    @Test
    void refreshCurrentServerAddr() {

        // arrange
        ArrayList<String> fixed = new ArrayList<String>();
        fixed.add("Smith");
        ServerListManager serverListManager = new ServerListManager(fixed);

        // act
        serverListManager.refreshCurrentServerAddr();

        // assert
        assertThat(serverListManager.getIterator().hasNext(), is(false));
    }

    @Test
    void getCurrentServerAddr() {
        ArrayList<String> fixed = new ArrayList<String>();
        fixed.add("Smith");
        ServerListManager serverListManager = new ServerListManager(fixed);
        assertThat(serverListManager.getCurrentServerAddr(), is("Smith:8848"));
        assertThat(serverListManager.getIterator().hasNext(), is(false));
    }

    @Test
    void updateCurrentServerAddr() {
        new ServerListManager().updateCurrentServerAddr("/some/path.html");
    }
}
