package com.alibaba.nacos.client.naming;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.listener.Event;
import com.alibaba.nacos.api.naming.listener.EventListener;

import java.util.ArrayList;
import java.util.Properties;

import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;

/**
 * Unit tests for com.alibaba.nacos.client.naming.NacosNamingService
 *
 * @author Diffblue Cover
 */

class NacosNamingServiceTest {

    @Test
    void factory1() {
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        // pojo NacosNamingService
    }

    @Test
    void factory2() {
        Properties properties = new Properties();
        properties.setProperty("com.alibaba.nacos.naming.log.filename", "value");
        // pojo NacosNamingService
    }

    @Test
    void factory3() {
        Properties properties = new Properties();
        properties.setProperty("namingLoadCacheAtStart", "value");
        // pojo NacosNamingService
    }

    @Test
    void getAllInstances() throws com.alibaba.nacos.api.exception.NacosException {
        assertThat(new NacosNamingService("Smith").getAllInstances("Acme"), empty());
        assertThat(new NacosNamingService("Smith").getAllInstances("bar", "Acme"), empty());
        assertThat(new NacosNamingService("Smith").getAllInstances("Acme", "Acme", true), empty());
        assertThat(new NacosNamingService("Smith").getAllInstances("Acme", true), empty());
    }

    @Test
    void selectInstances() throws com.alibaba.nacos.api.exception.NacosException {
        assertThat(new NacosNamingService("Smith").selectInstances("Acme", "Acme", false), empty());
        assertThat(new NacosNamingService("Smith").selectInstances("Acme", false), empty());
        assertThat(new NacosNamingService("Smith").selectInstances("Acme", "Acme", new ArrayList<String>(), false), empty());
    }

    @Test
    void subscribeServiceNameIsAcme() throws com.alibaba.nacos.api.exception.NacosException {
        EventListener listener = mock(EventListener.class);
        new NacosNamingService("Smith").subscribe("Acme", listener);
    }

    @Test
    void subscribe() throws com.alibaba.nacos.api.exception.NacosException {
        EventListener listener = mock(EventListener.class);
        new NacosNamingService("Smith").subscribe("Acme", "Acme", listener);
        Mockito.verify(listener).onEvent(ArgumentMatchers.<Event>any());
    }

    @Test
    void unsubscribe() throws com.alibaba.nacos.api.exception.NacosException {
        EventListener listener = mock(EventListener.class);
        new NacosNamingService("Smith").unsubscribe("Acme", listener);
    }

    @Test
    void unsubscribeGroupNameIsAcme() throws com.alibaba.nacos.api.exception.NacosException {
        EventListener listener = mock(EventListener.class);
        new NacosNamingService("Smith").unsubscribe("Acme", "Acme", listener);
    }

    @Test
    void getSubscribeServicesReturnsEmpty() {
        assertThat(new NacosNamingService("Smith").getSubscribeServices(), empty());
    }

    @Test
    void getServerStatus() {
        assertThat(new NacosNamingService("Smith").getServerStatus(), is("DOWN"));
        assertThat(new NacosNamingService(new Properties()).getServerStatus(), is("DOWN"));
    }
}
