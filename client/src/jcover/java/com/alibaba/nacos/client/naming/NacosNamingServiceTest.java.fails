package com.alibaba.nacos.client.naming;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNull.nullValue;
import static org.hamcrest.core.IsSame.sameInstance;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.naming.listener.EventListener;
import com.alibaba.nacos.client.naming.beat.BeatReactor;

import java.util.ArrayList;
import java.util.Properties;

import org.junit.Test;

/**
 * Unit tests for com.alibaba.nacos.client.naming.NacosNamingService
 *
 * @author Diffblue JCover
 */

public class NacosNamingServiceTest {

    @Test(timeout=10000)
    public void getAllInstances() throws com.alibaba.nacos.api.exception.NacosException {
        assertTrue(new NacosNamingService("Smith").getAllInstances("bar").isEmpty());
        assertTrue(new NacosNamingService("Smith").getAllInstances("bar", "/bin/bash").isEmpty());
        assertTrue(new NacosNamingService("Smith").getAllInstances("/bin/bash", "/bin/bash", true).isEmpty());
        assertTrue(new NacosNamingService("Smith").getAllInstances("/bin/bash", true).isEmpty());
    }

    @Test(timeout=10000)
    public void getBeatReactor() {
        NacosNamingService nacosNamingService = new NacosNamingService("Smith");
        BeatReactor result = nacosNamingService.getBeatReactor();
        // pojo BeatReactor
        assertThat(nacosNamingService.getBeatReactor(), sameInstance(result));
    }

    @Test(timeout=10000)
    public void getServerStatus() {
        assertThat(new NacosNamingService("Smith").getServerStatus(), is("DOWN"));
        assertThat(new NacosNamingService(new Properties()).getServerStatus(), is("DOWN"));
    }

    @Test(timeout=10000)
    public void getSubscribeServicesReturnsEmpty() {
        assertTrue(new NacosNamingService("Smith").getSubscribeServices().isEmpty());
    }

    @Test(timeout=10000)
    public void selectInstances() throws com.alibaba.nacos.api.exception.NacosException {
        assertTrue(new NacosNamingService("Smith").selectInstances("/bin/bash", "/bin/bash", false).isEmpty());
        assertTrue(new NacosNamingService("Smith").selectInstances("/bin/bash", false).isEmpty());
        assertTrue(new NacosNamingService("Smith").selectInstances("/bin/bash", "/bin/bash", new ArrayList<String>(), false).isEmpty());
    }

    @Test(timeout=10000)
    public void subscribe1() throws com.alibaba.nacos.api.exception.NacosException {
        NacosNamingService nacosNamingService = new NacosNamingService("Smith");
        EventListener listener = mock(EventListener.class);
        nacosNamingService.subscribe("/bin/bash", listener);
        assertThat(nacosNamingService.getSubscribeServices().size(), is(1));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getCacheMillis(), is(1_000L));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getChecksum(), is(""));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getClusters(), is(nullValue()));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getGroupName(), is("DEFAULT_GROUP"));
        assertTrue(nacosNamingService.getSubscribeServices().get(0).getHosts().isEmpty());
        assertThat(nacosNamingService.getSubscribeServices().get(0).getJsonFromServer(), is(""));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getKey(), is("/bin/bash"));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getKeyEncoded(), is("%2Fbin%2Fbash"));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getLastRefTime(), is(0L));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getName(), is("/bin/bash"));
        assertThat(nacosNamingService.getSubscribeServices().get(0).isAllIPs(), is(false));
        assertThat(nacosNamingService.getSubscribeServices().get(0).isValid(), is(true));
    }

    @Test(timeout=10000)
    public void subscribe2() throws com.alibaba.nacos.api.exception.NacosException {
        NacosNamingService nacosNamingService = new NacosNamingService("Smith");
        EventListener listener = mock(EventListener.class);
        nacosNamingService.subscribe("/bin/bash", "/bin/bash", listener);
        assertThat(nacosNamingService.getSubscribeServices().size(), is(1));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getCacheMillis(), is(1_000L));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getChecksum(), is(""));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getClusters(), is(nullValue()));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getGroupName(), is("/bin/bash"));
        assertTrue(nacosNamingService.getSubscribeServices().get(0).getHosts().isEmpty());
        assertThat(nacosNamingService.getSubscribeServices().get(0).getJsonFromServer(), is(""));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getKey(), is("/bin/bash"));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getKeyEncoded(), is("%2Fbin%2Fbash"));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getLastRefTime(), is(0L));
        assertThat(nacosNamingService.getSubscribeServices().get(0).getName(), is("/bin/bash"));
        assertThat(nacosNamingService.getSubscribeServices().get(0).isAllIPs(), is(false));
        assertThat(nacosNamingService.getSubscribeServices().get(0).isValid(), is(true));
    }

    @Test(timeout=10000)
    public void unsubscribe1() throws com.alibaba.nacos.api.exception.NacosException {
        EventListener listener = mock(EventListener.class);
        new NacosNamingService("Smith").unsubscribe("/bin/bash", listener);
    }

    @Test(timeout=10000)
    public void unsubscribe2() throws com.alibaba.nacos.api.exception.NacosException {
        EventListener listener = mock(EventListener.class);
        new NacosNamingService("Smith").unsubscribe("/bin/bash", "/bin/bash", listener);
    }
}
