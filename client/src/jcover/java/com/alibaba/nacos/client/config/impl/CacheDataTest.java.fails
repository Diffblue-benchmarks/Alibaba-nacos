package com.alibaba.nacos.client.config.impl;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.core.Is.is;
import static org.mockito.Mockito.mock;

import com.alibaba.nacos.api.config.listener.Listener;
import com.alibaba.nacos.client.config.filter.impl.ConfigFilterChainManager;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.alibaba.nacos.client.config.impl.CacheData
 *
 * @author Diffblue Cover
 */

class CacheDataTest {

    @Test
    void factory1() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something");
        cacheData.setContent("hello");
        cacheData.setInitializing(true);
        cacheData.setLocalConfigInfoVersion(1L);
        cacheData.setTaskId(1);
        cacheData.setUseLocalConfigInfo(false);
        assertThat(cacheData.getContent(), is("hello"));
        assertThat(cacheData.getLocalConfigInfoVersion(), is(-1L));
        assertThat(cacheData.getMd5(), is("5d41402abc4b2a76b9719d911017c592"));
        assertThat(cacheData.getTaskId(), is(1));
        assertThat(cacheData.getTenant(), is(""));
        assertThat(cacheData.isInitializing(), is(true));
        assertThat(cacheData.isUseLocalConfigInfo(), is(false));
    }

    @Test
    void factory2() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something");
        cacheData.setContent("hello");
        cacheData.setInitializing(false);
        cacheData.setLocalConfigInfoVersion(1L);
        cacheData.setTaskId(1);
        cacheData.setUseLocalConfigInfo(true);
        assertThat(cacheData.getContent(), is("hello"));
        assertThat(cacheData.getLocalConfigInfoVersion(), is(1L));
        assertThat(cacheData.getMd5(), is("5d41402abc4b2a76b9719d911017c592"));
        assertThat(cacheData.getTaskId(), is(1));
        assertThat(cacheData.getTenant(), is(""));
        assertThat(cacheData.isInitializing(), is(false));
        assertThat(cacheData.isUseLocalConfigInfo(), is(true));
    }

    @Test
    void factory3() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something", "something");
        cacheData.setContent("hello");
        cacheData.setInitializing(true);
        cacheData.setLocalConfigInfoVersion(1L);
        cacheData.setTaskId(1);
        cacheData.setUseLocalConfigInfo(false);
        assertThat(cacheData.getContent(), is("hello"));
        assertThat(cacheData.getLocalConfigInfoVersion(), is(-1L));
        assertThat(cacheData.getMd5(), is("5d41402abc4b2a76b9719d911017c592"));
        assertThat(cacheData.getTaskId(), is(1));
        assertThat(cacheData.getTenant(), is("something"));
        assertThat(cacheData.isInitializing(), is(true));
        assertThat(cacheData.isUseLocalConfigInfo(), is(false));
    }

    @Test
    void addListener() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something");
        cacheData.setContent("hello");
        Listener listener = mock(Listener.class);
        cacheData.addListener(listener);
    }

    @Test
    void removeListener() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something");
        cacheData.setContent("hello");
        Listener listener = mock(Listener.class);
        cacheData.removeListener(listener);
    }

    @Test
    void getListenersReturnsEmpty() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something");
        cacheData.setContent("hello");
        assertThat(cacheData.getListeners(), empty());
    }

    @Test
    void equalsReturnsFalse() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something");
        cacheData.setContent("hello");
        assertThat(cacheData.equals(new Object()), is(false));
    }

    @Test
    void checkListenerMd5() {
        CacheData cacheData = new CacheData(new ConfigFilterChainManager(), "Acme", "something", "something");
        cacheData.setContent("hello");
        cacheData.checkListenerMd5();
    }

    @Test
    void getMd5StringConfigIsFoo() {
        assertThat(CacheData.getMd5String("foo"), is("acbd18db4cc2f85cedef654fccc4a4d8"));
    }
}
